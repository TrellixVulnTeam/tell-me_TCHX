{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/mystudy/react/tell-me-react/src/conponents/GetPosts.jsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button, PostBlock } from \".\";\nimport { setAddData } from \"../redux/action\";\nimport \"../scss/components/getPosts.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar currentdate = new Date();\nvar datetime = currentdate.getFullYear() + \"-\" + currentdate.getMonth() + \"-\" + currentdate.getDay() + \"T\" + currentdate.getHours() + \":\" + currentdate.getMinutes() + \":\" + currentdate.getSeconds();\n\nconst GetPosts = () => {\n  _s();\n\n  const [posts, setPosts] = React.useState([]);\n  const [isLoaded, setIsLoaded] = React.useState(false);\n  const [error, setError] = React.useState(null);\n  const [updateDataPost, setUpdateDataPost] = React.useState(null);\n  const [currentPage, setcurrentPage] = React.useState(1);\n  const [postsPerPage] = React.useState(10);\n  const dispatch = useDispatch();\n  const postReducer = useSelector(state => state.postReducer); // console.log(postReducer);\n\n  const lastPostIndex = currentPage + postsPerPage;\n  const firstPostIndex = lastPostIndex - postsPerPage;\n  const currentPost = posts.slice();\n  React.useEffect(() => {\n    fetch(\"https://ekreative-json-server.herokuapp.com/664/posts?_page=7&_limit=20\").then(response => response.json()).then(data => {\n      setPosts(data);\n    });\n  }, []);\n\n  const getUpdatePost = () => {\n    posts.map(dataPost => {\n      setUpdateDataPost({\n        title: dataPost.title,\n        body: dataPost.body,\n        userId: dataPost.userId,\n        createAt: dataPost.createdAt,\n        updatedAt: datetime\n      });\n    });\n    axios.patch(`https://ekreative-json-server.herokuapp.com/664/post/`, updateDataPost);\n  };\n\n  const handleChange = e => {\n    dispatch(setAddData({\n      title: e.target.title,\n      body: e.target.body\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"get-posts\",\n    children: [posts.map(dataPost => /*#__PURE__*/_jsxDEV(PostBlock, { ...dataPost\n    }, dataPost.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)), postReducer.map(dataPost => /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"update-post\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"close\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"material-icons-outlined\",\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"update your post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          action: \"\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"header-for-post-form\",\n            children: \"title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-for-title\",\n            value: dataPost.title,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"header-for-post-form\",\n            children: \"post\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            type: \"text\",\n            className: \"input-for-post\",\n            value: dataPost.body,\n            onChange: handleChange,\n            children: dataPost.body\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"button\",\n            className: \"button-update\",\n            onClik: getUpdatePost,\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this)]\n    }, dataPost.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"\\xD7\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GetPosts, \"J1IIDhcl2qJQeklbWrNTQum7iCw=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = GetPosts;\nexport default GetPosts;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetPosts\");","map":{"version":3,"sources":["/Users/admin/Documents/mystudy/react/tell-me-react/src/conponents/GetPosts.jsx"],"names":["axios","React","useDispatch","useSelector","Button","PostBlock","setAddData","currentdate","Date","datetime","getFullYear","getMonth","getDay","getHours","getMinutes","getSeconds","GetPosts","posts","setPosts","useState","isLoaded","setIsLoaded","error","setError","updateDataPost","setUpdateDataPost","currentPage","setcurrentPage","postsPerPage","dispatch","postReducer","state","lastPostIndex","firstPostIndex","currentPost","slice","useEffect","fetch","then","response","json","data","getUpdatePost","map","dataPost","title","body","userId","createAt","createdAt","updatedAt","patch","handleChange","e","target","id"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button, PostBlock } from \".\";\nimport { setAddData } from \"../redux/action\";\nimport \"../scss/components/getPosts.scss\";\n\nvar currentdate = new Date();\n\nvar datetime =\n  currentdate.getFullYear() +\n  \"-\" +\n  currentdate.getMonth() +\n  \"-\" +\n  currentdate.getDay() +\n  \"T\" +\n  currentdate.getHours() +\n  \":\" +\n  currentdate.getMinutes() +\n  \":\" +\n  currentdate.getSeconds();\n\nconst GetPosts = () => {\n  const [posts, setPosts] = React.useState([]);\n  const [isLoaded, setIsLoaded] = React.useState(false);\n  const [error, setError] = React.useState(null);\n  const [updateDataPost, setUpdateDataPost] = React.useState(null);\n  const [currentPage, setcurrentPage] = React.useState(1);\n  const [postsPerPage] = React.useState(10);\n\n  const dispatch = useDispatch()\n\n  const postReducer = useSelector(state => state.postReducer)\n  // console.log(postReducer);\n\n  const lastPostIndex = currentPage + postsPerPage;\n  const firstPostIndex = lastPostIndex - postsPerPage;\n  const currentPost = posts.slice()\n\n  React.useEffect(() => {\n    fetch(\"https://ekreative-json-server.herokuapp.com/664/posts?_page=7&_limit=20\")\n      .then((response) => response.json())\n      .then((data) => {\n        setPosts(data);\n      });\n  }, []);\n\n  const getUpdatePost = () => {\n    posts.map((dataPost) => {\n      setUpdateDataPost({\n        title: dataPost.title,\n        body: dataPost.body,\n        userId: dataPost.userId,\n        createAt: dataPost.createdAt,\n        updatedAt: datetime\n      });\n    });\n\n    axios.patch(\n      `https://ekreative-json-server.herokuapp.com/664/post/`,\n      updateDataPost\n    );\n  };\n\n  const handleChange = (e) => {\n    dispatch(setAddData({ title: e.target.title, body: e.target.body}))\n  }\n\n  \n\n  return (\n    <div className=\"get-posts\">\n      {posts.map((dataPost) => (\n        <PostBlock key={dataPost.id} {...dataPost}  />\n      ))}\n      {postReducer.map((dataPost) => (\n        <div id=\"update-post\" key={dataPost.id}>\n          <div className=\"close\">\n            <span className=\"material-icons-outlined\">&times;</span>\n          </div>\n          <div className='modal-content'>\n            <h2>update your post</h2>\n            <form action=\"\">\n              {/* <div className=\"title-block\"> */}\n              <p className=\"header-for-post-form\">title</p>\n              <input\n                type=\"text\"\n                className=\"input-for-title\"\n                value={dataPost.title}\n                onChange={handleChange}\n              />\n              {/* </div> */}\n\n              {/* <div className=\"post-block\"> */}\n              <p className=\"header-for-post-form\">post</p>\n              <textarea\n                type=\"text\"\n                className=\"input-for-post\"\n                value={dataPost.body}\n                onChange={handleChange}\n              >\n                {dataPost.body}\n              </textarea>\n              {/* </div> */}\n\n              <Button\n                type=\"button\"\n                className=\"button-update\"\n                onClik={getUpdatePost}\n              >\n                Edit\n              </Button>\n              </form>\n            </div>\n        </div>\n      ))}\n      <span>&times;</span>\n\n    </div>\n  );\n};\n\nexport default GetPosts;\n"]},"metadata":{},"sourceType":"module"}