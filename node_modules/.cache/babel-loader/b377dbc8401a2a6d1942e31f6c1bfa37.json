{"ast":null,"code":"'use strict'; // Do a two-pass walk, first to get the list of packages that need to be\n// bundled, then again to get the actual files and folders.\n// Keep a cache of node_modules content and package.json data, so that the\n// second walk doesn't have to re-do all the same work.\n\nconst bundleWalk = require('npm-bundled');\n\nconst BundleWalker = bundleWalk.BundleWalker;\nconst BundleWalkerSync = bundleWalk.BundleWalkerSync;\n\nconst ignoreWalk = require('ignore-walk');\n\nconst IgnoreWalker = ignoreWalk.Walker;\nconst IgnoreWalkerSync = ignoreWalk.WalkerSync;\nconst rootBuiltinRules = Symbol('root-builtin-rules');\nconst packageNecessaryRules = Symbol('package-necessary-rules');\n\nconst path = require('path');\n\nconst normalizePackageBin = require('npm-normalize-package-bin'); // Weird side-effect of this: a readme (etc) file will be included\n// if it exists anywhere within a folder with a package.json file.\n// The original intent was only to include these files in the root,\n// but now users in the wild are dependent on that behavior for\n// localized documentation and other use cases.  Adding a `/` to\n// these rules, while tempting and arguably more \"correct\", is a\n// significant change that will break existing use cases.\n\n\nconst packageMustHaveFileNames = 'readme|copying|license|licence';\nconst packageMustHaves = `@(${packageMustHaveFileNames}){,.*[^~$]}`;\nconst packageMustHavesRE = new RegExp(`^(${packageMustHaveFileNames})(\\\\..*[^~$])?$`, 'i');\n\nconst fs = require('fs');\n\nconst glob = require('glob');\n\nconst defaultRules = ['.npmignore', '.gitignore', '**/.git', '**/.svn', '**/.hg', '**/CVS', '**/.git/**', '**/.svn/**', '**/.hg/**', '**/CVS/**', '/.lock-wscript', '/.wafpickle-*', '/build/config.gypi', 'npm-debug.log', '**/.npmrc', '.*.swp', '.DS_Store', '**/.DS_Store/**', '._*', '**/._*/**', '*.orig', '/package-lock.json', '/yarn.lock', '/archived-packages/**']; // There may be others, but :?|<> are handled by node-tar\n\nconst nameIsBadForWindows = file => /\\*/.test(file); // a decorator that applies our custom rules to an ignore walker\n\n\nconst npmWalker = Class => class Walker extends Class {\n  constructor(opt) {\n    opt = opt || {}; // the order in which rules are applied.\n\n    opt.ignoreFiles = [rootBuiltinRules, 'package.json', '.npmignore', '.gitignore', packageNecessaryRules];\n    opt.includeEmpty = false;\n    opt.path = opt.path || process.cwd(); // only follow links in the root node_modules folder, because if those\n    // folders are included, it's because they're bundled, and bundles\n    // should include the contents, not the symlinks themselves.\n    // This regexp tests to see that we're either a node_modules folder,\n    // or a @scope within a node_modules folder, in the root's node_modules\n    // hierarchy (ie, not in test/foo/node_modules/ or something).\n\n    const followRe = /^(?:\\/node_modules\\/(?:@[^/]+\\/[^/]+|[^/]+)\\/)*\\/node_modules(?:\\/@[^/]+)?$/;\n    const rootPath = opt.parent ? opt.parent.root : opt.path;\n    const followTestPath = opt.path.replace(/\\\\/g, '/').substr(rootPath.length);\n    opt.follow = followRe.test(followTestPath);\n    super(opt); // ignore a bunch of things by default at the root level.\n    // also ignore anything in the main project node_modules hierarchy,\n    // except bundled dependencies\n\n    if (this.isProject) {\n      this.bundled = opt.bundled || [];\n      this.bundledScopes = Array.from(new Set(this.bundled.filter(f => /^@/.test(f)).map(f => f.split('/')[0])));\n      const rules = defaultRules.join('\\n') + '\\n';\n      this.packageJsonCache = this.parent ? this.parent.packageJsonCache : opt.packageJsonCache || new Map();\n      super.onReadIgnoreFile(rootBuiltinRules, rules, _ => _);\n    } else {\n      this.bundled = [];\n      this.bundledScopes = [];\n      this.packageJsonCache = this.parent.packageJsonCache;\n    }\n  }\n\n  get isProject() {\n    return !this.parent || this.parent.follow && this.isSymbolicLink;\n  }\n\n  onReaddir(entries) {\n    if (this.isProject) {\n      entries = entries.filter(e => e !== '.git' && !(e === 'node_modules' && this.bundled.length === 0));\n    } // if we have a package.json, then look in it for 'files'\n    // we _only_ do this in the root project, not bundled deps\n    // or other random folders.  Bundled deps are always assumed\n    // to be in the state the user wants to include them, and\n    // a package.json somewhere else might be a template or\n    // test or something else entirely.\n\n\n    if (!this.isProject || !entries.includes('package.json')) {\n      return super.onReaddir(entries);\n    } // when the cache has been seeded with the root manifest,\n    // we must respect that (it may differ from the filesystem)\n\n\n    const ig = path.resolve(this.path, 'package.json');\n\n    if (this.packageJsonCache.has(ig)) {\n      const pkg = this.packageJsonCache.get(ig); // fall back to filesystem when seeded manifest is invalid\n\n      if (!pkg || typeof pkg !== 'object') {\n        return this.readPackageJson(entries);\n      } // feels wonky, but this ensures package bin is _always_\n      // normalized, as well as guarding against invalid JSON\n\n\n      return this.getPackageFiles(entries, JSON.stringify(pkg));\n    }\n\n    this.readPackageJson(entries);\n  }\n\n  onReadPackageJson(entries, er, pkg) {\n    if (er) {\n      this.emit('error', er);\n    } else {\n      this.getPackageFiles(entries, pkg);\n    }\n  }\n\n  mustHaveFilesFromPackage(pkg) {\n    const files = [];\n\n    if (pkg.browser) {\n      files.push('/' + pkg.browser);\n    }\n\n    if (pkg.main) {\n      files.push('/' + pkg.main);\n    }\n\n    if (pkg.bin) {\n      // always an object because normalized already\n      for (const key in pkg.bin) {\n        files.push('/' + pkg.bin[key]);\n      }\n    }\n\n    files.push('/package.json', '/npm-shrinkwrap.json', '!/package-lock.json', packageMustHaves);\n    return files;\n  }\n\n  getPackageFiles(entries, pkg) {\n    try {\n      // XXX this could be changed to use read-package-json-fast\n      // which handles the normalizing of bins for us, and simplifies\n      // the test for bundleDependencies and bundledDependencies later.\n      // HOWEVER if we do this, we need to be sure that we're careful\n      // about what we write back out since rpj-fast removes some fields\n      // that the user likely wants to keep. it also would add a second\n      // file read that we would want to optimize away.\n      pkg = normalizePackageBin(JSON.parse(pkg.toString()));\n    } catch (er) {\n      // not actually a valid package.json\n      return super.onReaddir(entries);\n    }\n\n    const ig = path.resolve(this.path, 'package.json');\n    this.packageJsonCache.set(ig, pkg); // no files list, just return the normal readdir() result\n\n    if (!Array.isArray(pkg.files)) {\n      return super.onReaddir(entries);\n    }\n\n    pkg.files.push(...this.mustHaveFilesFromPackage(pkg)); // If the package has a files list, then it's unlikely to include\n    // node_modules, because why would you do that?  but since we use\n    // the files list as the effective readdir result, that means it\n    // looks like we don't have a node_modules folder at all unless we\n    // include it here.\n\n    if ((pkg.bundleDependencies || pkg.bundledDependencies) && entries.includes('node_modules')) {\n      pkg.files.push('node_modules');\n    }\n\n    const patterns = Array.from(new Set(pkg.files)).reduce((set, pattern) => {\n      const excl = pattern.match(/^!+/);\n\n      if (excl) {\n        pattern = pattern.substr(excl[0].length);\n      } // strip off any / from the start of the pattern.  /foo => foo\n\n\n      pattern = pattern.replace(/^\\/+/, ''); // an odd number of ! means a negated pattern.  !!foo ==> foo\n\n      const negate = excl && excl[0].length % 2 === 1;\n      set.push({\n        pattern,\n        negate\n      });\n      return set;\n    }, []);\n    let n = patterns.length;\n    const set = new Set();\n    const negates = new Set();\n    const results = [];\n\n    const then = (pattern, negate, er, fileList, i) => {\n      if (er) {\n        return this.emit('error', er);\n      }\n\n      results[i] = {\n        negate,\n        fileList\n      };\n\n      if (--n === 0) {\n        processResults(results);\n      }\n    };\n\n    const processResults = results => {\n      for (const {\n        negate,\n        fileList\n      } of results) {\n        if (negate) {\n          fileList.forEach(f => {\n            f = f.replace(/\\/+$/, '');\n            set.delete(f);\n            negates.add(f);\n          });\n        } else {\n          fileList.forEach(f => {\n            f = f.replace(/\\/+$/, '');\n            set.add(f);\n            negates.delete(f);\n          });\n        }\n      }\n\n      const list = Array.from(set); // replace the files array with our computed explicit set\n\n      pkg.files = list.concat(Array.from(negates).map(f => '!' + f));\n      const rdResult = Array.from(new Set(list.map(f => f.replace(/^\\/+/, ''))));\n      super.onReaddir(rdResult);\n    }; // maintain the index so that we process them in-order only once all\n    // are completed, otherwise the parallelism messes things up, since a\n    // glob like **/*.js will always be slower than a subsequent !foo.js\n\n\n    patterns.forEach((_ref, i) => {\n      let {\n        pattern,\n        negate\n      } = _ref;\n      return this.globFiles(pattern, (er, res) => then(pattern, negate, er, res, i));\n    });\n  }\n\n  filterEntry(entry, partial) {\n    // get the partial path from the root of the walk\n    const p = this.path.substr(this.root.length + 1);\n    const pkgre = /^node_modules\\/(@[^/]+\\/?[^/]+|[^/]+)(\\/.*)?$/;\n    const {\n      isProject\n    } = this;\n    const pkg = isProject && pkgre.test(entry) ? entry.replace(pkgre, '$1') : null;\n    const rootNM = isProject && entry === 'node_modules';\n    const rootPJ = isProject && entry === 'package.json';\n    return (// if we're in a bundled package, check with the parent.\n      /^node_modules($|\\/)/i.test(p) && !this.isProject ? this.parent.filterEntry(this.basename + '/' + entry, partial) // if package is bundled, all files included\n      // also include @scope dirs for bundled scoped deps\n      // they'll be ignored if no files end up in them.\n      // However, this only matters if we're in the root.\n      // node_modules folders elsewhere, like lib/node_modules,\n      // should be included normally unless ignored.\n      : pkg ? this.bundled.indexOf(pkg) !== -1 || this.bundledScopes.indexOf(pkg) !== -1 // only walk top node_modules if we want to bundle something\n      : rootNM ? !!this.bundled.length // always include package.json at the root.\n      : rootPJ ? true // always include readmes etc in any included dir\n      : packageMustHavesRE.test(entry) ? true // npm-shrinkwrap and package.json always included in the root pkg\n      : isProject && (entry === 'npm-shrinkwrap.json' || entry === 'package.json') ? true // package-lock never included\n      : isProject && entry === 'package-lock.json' ? false // otherwise, follow ignore-walk's logic\n      : super.filterEntry(entry, partial)\n    );\n  }\n\n  filterEntries() {\n    if (this.ignoreRules['.npmignore']) {\n      this.ignoreRules['.gitignore'] = null;\n    }\n\n    this.filterEntries = super.filterEntries;\n    super.filterEntries();\n  }\n\n  addIgnoreFile(file, then) {\n    const ig = path.resolve(this.path, file);\n\n    if (file === 'package.json' && !this.isProject) {\n      then();\n    } else if (this.packageJsonCache.has(ig)) {\n      this.onPackageJson(ig, this.packageJsonCache.get(ig), then);\n    } else {\n      super.addIgnoreFile(file, then);\n    }\n  }\n\n  onPackageJson(ig, pkg, then) {\n    this.packageJsonCache.set(ig, pkg);\n\n    if (Array.isArray(pkg.files)) {\n      // in this case we already included all the must-haves\n      super.onReadIgnoreFile('package.json', pkg.files.map(f => '!' + f).join('\\n') + '\\n', then);\n    } else {\n      // if there's a bin, browser or main, make sure we don't ignore it\n      // also, don't ignore the package.json itself, or any files that\n      // must be included in the package.\n      const rules = this.mustHaveFilesFromPackage(pkg).map(f => `!${f}`);\n      const data = rules.join('\\n') + '\\n';\n      super.onReadIgnoreFile(packageNecessaryRules, data, then);\n    }\n  } // override parent stat function to completely skip any filenames\n  // that will break windows entirely.\n  // XXX(isaacs) Next major version should make this an error instead.\n\n\n  stat(_ref2, then) {\n    let {\n      entry,\n      file,\n      dir\n    } = _ref2;\n\n    if (nameIsBadForWindows(entry)) {\n      then();\n    } else {\n      super.stat({\n        entry,\n        file,\n        dir\n      }, then);\n    }\n  } // override parent onstat function to nix all symlinks, other than\n  // those coming out of the followed bundled symlink deps\n\n\n  onstat(_ref3, then) {\n    let {\n      st,\n      entry,\n      file,\n      dir,\n      isSymbolicLink\n    } = _ref3;\n\n    if (st.isSymbolicLink()) {\n      then();\n    } else {\n      super.onstat({\n        st,\n        entry,\n        file,\n        dir,\n        isSymbolicLink\n      }, then);\n    }\n  }\n\n  onReadIgnoreFile(file, data, then) {\n    if (file === 'package.json') {\n      try {\n        const ig = path.resolve(this.path, file);\n        this.onPackageJson(ig, JSON.parse(data), then);\n      } catch (er) {\n        // ignore package.json files that are not json\n        then();\n      }\n    } else {\n      super.onReadIgnoreFile(file, data, then);\n    }\n  }\n\n  sort(a, b) {\n    return sort(a, b);\n  }\n\n};\n\nclass Walker extends npmWalker(IgnoreWalker) {\n  globFiles(pattern, cb) {\n    glob(pattern, {\n      dot: true,\n      cwd: this.path,\n      nocase: true\n    }, cb);\n  }\n\n  readPackageJson(entries) {\n    fs.readFile(this.path + '/package.json', (er, pkg) => this.onReadPackageJson(entries, er, pkg));\n  }\n\n  walker(entry, opt, then) {\n    new Walker(this.walkerOpt(entry, opt)).on('done', then).start();\n  }\n\n}\n\nclass WalkerSync extends npmWalker(IgnoreWalkerSync) {\n  globFiles(pattern, cb) {\n    cb(null, glob.sync(pattern, {\n      dot: true,\n      cwd: this.path,\n      nocase: true\n    }));\n  }\n\n  readPackageJson(entries) {\n    const p = this.path + '/package.json';\n\n    try {\n      this.onReadPackageJson(entries, null, fs.readFileSync(p));\n    } catch (er) {\n      this.onReadPackageJson(entries, er);\n    }\n  }\n\n  walker(entry, opt, then) {\n    new WalkerSync(this.walkerOpt(entry, opt)).start();\n    then();\n  }\n\n}\n\nconst walk = (options, callback) => {\n  options = options || {};\n  const p = new Promise((resolve, reject) => {\n    const bw = new BundleWalker(options);\n    bw.on('done', bundled => {\n      options.bundled = bundled;\n      options.packageJsonCache = bw.packageJsonCache;\n      new Walker(options).on('done', resolve).on('error', reject).start();\n    });\n    bw.start();\n  });\n  return callback ? p.then(res => callback(null, res), callback) : p;\n};\n\nconst walkSync = options => {\n  options = options || {};\n  const bw = new BundleWalkerSync(options).start();\n  options.bundled = bw.result;\n  options.packageJsonCache = bw.packageJsonCache;\n  const walker = new WalkerSync(options);\n  walker.start();\n  return walker.result;\n}; // optimize for compressibility\n// extname, then basename, then locale alphabetically\n// https://twitter.com/isntitvacant/status/1131094910923231232\n\n\nconst sort = (a, b) => {\n  const exta = path.extname(a).toLowerCase();\n  const extb = path.extname(b).toLowerCase();\n  const basea = path.basename(a).toLowerCase();\n  const baseb = path.basename(b).toLowerCase();\n  return exta.localeCompare(extb, 'en') || basea.localeCompare(baseb, 'en') || a.localeCompare(b, 'en');\n};\n\nmodule.exports = walk;\nwalk.sync = walkSync;\nwalk.Walker = Walker;\nwalk.WalkerSync = WalkerSync;","map":{"version":3,"sources":["/Users/admin/Documents/mystudy/react/tell-me-react/tell-me-react/node_modules/npm/node_modules/npm-packlist/index.js"],"names":["bundleWalk","require","BundleWalker","BundleWalkerSync","ignoreWalk","IgnoreWalker","Walker","IgnoreWalkerSync","WalkerSync","rootBuiltinRules","Symbol","packageNecessaryRules","path","normalizePackageBin","packageMustHaveFileNames","packageMustHaves","packageMustHavesRE","RegExp","fs","glob","defaultRules","nameIsBadForWindows","file","test","npmWalker","Class","constructor","opt","ignoreFiles","includeEmpty","process","cwd","followRe","rootPath","parent","root","followTestPath","replace","substr","length","follow","isProject","bundled","bundledScopes","Array","from","Set","filter","f","map","split","rules","join","packageJsonCache","Map","onReadIgnoreFile","_","isSymbolicLink","onReaddir","entries","e","includes","ig","resolve","has","pkg","get","readPackageJson","getPackageFiles","JSON","stringify","onReadPackageJson","er","emit","mustHaveFilesFromPackage","files","browser","push","main","bin","key","parse","toString","set","isArray","bundleDependencies","bundledDependencies","patterns","reduce","pattern","excl","match","negate","n","negates","results","then","fileList","i","processResults","forEach","delete","add","list","concat","rdResult","globFiles","res","filterEntry","entry","partial","p","pkgre","rootNM","rootPJ","basename","indexOf","filterEntries","ignoreRules","addIgnoreFile","onPackageJson","data","stat","dir","onstat","st","sort","a","b","cb","dot","nocase","readFile","walker","walkerOpt","on","start","sync","readFileSync","walk","options","callback","Promise","reject","bw","walkSync","result","exta","extname","toLowerCase","extb","basea","baseb","localeCompare","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\n// Do a two-pass walk, first to get the list of packages that need to be\n// bundled, then again to get the actual files and folders.\n// Keep a cache of node_modules content and package.json data, so that the\n// second walk doesn't have to re-do all the same work.\n\nconst bundleWalk = require('npm-bundled')\nconst BundleWalker = bundleWalk.BundleWalker\nconst BundleWalkerSync = bundleWalk.BundleWalkerSync\n\nconst ignoreWalk = require('ignore-walk')\nconst IgnoreWalker = ignoreWalk.Walker\nconst IgnoreWalkerSync = ignoreWalk.WalkerSync\n\nconst rootBuiltinRules = Symbol('root-builtin-rules')\nconst packageNecessaryRules = Symbol('package-necessary-rules')\nconst path = require('path')\n\nconst normalizePackageBin = require('npm-normalize-package-bin')\n\n// Weird side-effect of this: a readme (etc) file will be included\n// if it exists anywhere within a folder with a package.json file.\n// The original intent was only to include these files in the root,\n// but now users in the wild are dependent on that behavior for\n// localized documentation and other use cases.  Adding a `/` to\n// these rules, while tempting and arguably more \"correct\", is a\n// significant change that will break existing use cases.\nconst packageMustHaveFileNames = 'readme|copying|license|licence'\n\nconst packageMustHaves = `@(${packageMustHaveFileNames}){,.*[^~$]}`\nconst packageMustHavesRE = new RegExp(`^(${packageMustHaveFileNames})(\\\\..*[^~$])?$`, 'i')\n\nconst fs = require('fs')\nconst glob = require('glob')\n\nconst defaultRules = [\n  '.npmignore',\n  '.gitignore',\n  '**/.git',\n  '**/.svn',\n  '**/.hg',\n  '**/CVS',\n  '**/.git/**',\n  '**/.svn/**',\n  '**/.hg/**',\n  '**/CVS/**',\n  '/.lock-wscript',\n  '/.wafpickle-*',\n  '/build/config.gypi',\n  'npm-debug.log',\n  '**/.npmrc',\n  '.*.swp',\n  '.DS_Store',\n  '**/.DS_Store/**',\n  '._*',\n  '**/._*/**',\n  '*.orig',\n  '/package-lock.json',\n  '/yarn.lock',\n  '/archived-packages/**',\n]\n\n// There may be others, but :?|<> are handled by node-tar\nconst nameIsBadForWindows = file => /\\*/.test(file)\n\n// a decorator that applies our custom rules to an ignore walker\nconst npmWalker = Class => class Walker extends Class {\n  constructor (opt) {\n    opt = opt || {}\n\n    // the order in which rules are applied.\n    opt.ignoreFiles = [\n      rootBuiltinRules,\n      'package.json',\n      '.npmignore',\n      '.gitignore',\n      packageNecessaryRules,\n    ]\n\n    opt.includeEmpty = false\n    opt.path = opt.path || process.cwd()\n\n    // only follow links in the root node_modules folder, because if those\n    // folders are included, it's because they're bundled, and bundles\n    // should include the contents, not the symlinks themselves.\n    // This regexp tests to see that we're either a node_modules folder,\n    // or a @scope within a node_modules folder, in the root's node_modules\n    // hierarchy (ie, not in test/foo/node_modules/ or something).\n    const followRe = /^(?:\\/node_modules\\/(?:@[^/]+\\/[^/]+|[^/]+)\\/)*\\/node_modules(?:\\/@[^/]+)?$/\n    const rootPath = opt.parent ? opt.parent.root : opt.path\n    const followTestPath = opt.path.replace(/\\\\/g, '/').substr(rootPath.length)\n    opt.follow = followRe.test(followTestPath)\n\n    super(opt)\n\n    // ignore a bunch of things by default at the root level.\n    // also ignore anything in the main project node_modules hierarchy,\n    // except bundled dependencies\n    if (this.isProject) {\n      this.bundled = opt.bundled || []\n      this.bundledScopes = Array.from(new Set(\n        this.bundled.filter(f => /^@/.test(f))\n          .map(f => f.split('/')[0])))\n      const rules = defaultRules.join('\\n') + '\\n'\n      this.packageJsonCache = this.parent ? this.parent.packageJsonCache\n        : (opt.packageJsonCache || new Map())\n      super.onReadIgnoreFile(rootBuiltinRules, rules, _ => _)\n    } else {\n      this.bundled = []\n      this.bundledScopes = []\n      this.packageJsonCache = this.parent.packageJsonCache\n    }\n  }\n\n  get isProject () {\n    return !this.parent || this.parent.follow && this.isSymbolicLink\n  }\n\n  onReaddir (entries) {\n    if (this.isProject) {\n      entries = entries.filter(e =>\n        e !== '.git' &&\n        !(e === 'node_modules' && this.bundled.length === 0)\n      )\n    }\n\n    // if we have a package.json, then look in it for 'files'\n    // we _only_ do this in the root project, not bundled deps\n    // or other random folders.  Bundled deps are always assumed\n    // to be in the state the user wants to include them, and\n    // a package.json somewhere else might be a template or\n    // test or something else entirely.\n    if (!this.isProject || !entries.includes('package.json')) {\n      return super.onReaddir(entries)\n    }\n\n    // when the cache has been seeded with the root manifest,\n    // we must respect that (it may differ from the filesystem)\n    const ig = path.resolve(this.path, 'package.json')\n\n    if (this.packageJsonCache.has(ig)) {\n      const pkg = this.packageJsonCache.get(ig)\n\n      // fall back to filesystem when seeded manifest is invalid\n      if (!pkg || typeof pkg !== 'object') {\n        return this.readPackageJson(entries)\n      }\n\n      // feels wonky, but this ensures package bin is _always_\n      // normalized, as well as guarding against invalid JSON\n      return this.getPackageFiles(entries, JSON.stringify(pkg))\n    }\n\n    this.readPackageJson(entries)\n  }\n\n  onReadPackageJson (entries, er, pkg) {\n    if (er) {\n      this.emit('error', er)\n    } else {\n      this.getPackageFiles(entries, pkg)\n    }\n  }\n\n  mustHaveFilesFromPackage (pkg) {\n    const files = []\n    if (pkg.browser) {\n      files.push('/' + pkg.browser)\n    }\n    if (pkg.main) {\n      files.push('/' + pkg.main)\n    }\n    if (pkg.bin) {\n      // always an object because normalized already\n      for (const key in pkg.bin) {\n        files.push('/' + pkg.bin[key])\n      }\n    }\n    files.push(\n      '/package.json',\n      '/npm-shrinkwrap.json',\n      '!/package-lock.json',\n      packageMustHaves\n    )\n    return files\n  }\n\n  getPackageFiles (entries, pkg) {\n    try {\n      // XXX this could be changed to use read-package-json-fast\n      // which handles the normalizing of bins for us, and simplifies\n      // the test for bundleDependencies and bundledDependencies later.\n      // HOWEVER if we do this, we need to be sure that we're careful\n      // about what we write back out since rpj-fast removes some fields\n      // that the user likely wants to keep. it also would add a second\n      // file read that we would want to optimize away.\n      pkg = normalizePackageBin(JSON.parse(pkg.toString()))\n    } catch (er) {\n      // not actually a valid package.json\n      return super.onReaddir(entries)\n    }\n\n    const ig = path.resolve(this.path, 'package.json')\n    this.packageJsonCache.set(ig, pkg)\n\n    // no files list, just return the normal readdir() result\n    if (!Array.isArray(pkg.files)) {\n      return super.onReaddir(entries)\n    }\n\n    pkg.files.push(...this.mustHaveFilesFromPackage(pkg))\n\n    // If the package has a files list, then it's unlikely to include\n    // node_modules, because why would you do that?  but since we use\n    // the files list as the effective readdir result, that means it\n    // looks like we don't have a node_modules folder at all unless we\n    // include it here.\n    if ((pkg.bundleDependencies || pkg.bundledDependencies) && entries.includes('node_modules')) {\n      pkg.files.push('node_modules')\n    }\n\n    const patterns = Array.from(new Set(pkg.files)).reduce((set, pattern) => {\n      const excl = pattern.match(/^!+/)\n      if (excl) {\n        pattern = pattern.substr(excl[0].length)\n      }\n      // strip off any / from the start of the pattern.  /foo => foo\n      pattern = pattern.replace(/^\\/+/, '')\n      // an odd number of ! means a negated pattern.  !!foo ==> foo\n      const negate = excl && excl[0].length % 2 === 1\n      set.push({ pattern, negate })\n      return set\n    }, [])\n\n    let n = patterns.length\n    const set = new Set()\n    const negates = new Set()\n    const results = []\n    const then = (pattern, negate, er, fileList, i) => {\n      if (er) {\n        return this.emit('error', er)\n      }\n\n      results[i] = { negate, fileList }\n      if (--n === 0) {\n        processResults(results)\n      }\n    }\n    const processResults = results => {\n      for (const {negate, fileList} of results) {\n        if (negate) {\n          fileList.forEach(f => {\n            f = f.replace(/\\/+$/, '')\n            set.delete(f)\n            negates.add(f)\n          })\n        } else {\n          fileList.forEach(f => {\n            f = f.replace(/\\/+$/, '')\n            set.add(f)\n            negates.delete(f)\n          })\n        }\n      }\n\n      const list = Array.from(set)\n      // replace the files array with our computed explicit set\n      pkg.files = list.concat(Array.from(negates).map(f => '!' + f))\n      const rdResult = Array.from(new Set(\n        list.map(f => f.replace(/^\\/+/, ''))\n      ))\n      super.onReaddir(rdResult)\n    }\n\n    // maintain the index so that we process them in-order only once all\n    // are completed, otherwise the parallelism messes things up, since a\n    // glob like **/*.js will always be slower than a subsequent !foo.js\n    patterns.forEach(({pattern, negate}, i) =>\n      this.globFiles(pattern, (er, res) => then(pattern, negate, er, res, i)))\n  }\n\n  filterEntry (entry, partial) {\n    // get the partial path from the root of the walk\n    const p = this.path.substr(this.root.length + 1)\n    const pkgre = /^node_modules\\/(@[^/]+\\/?[^/]+|[^/]+)(\\/.*)?$/\n    const { isProject } = this\n    const pkg = isProject && pkgre.test(entry) ?\n      entry.replace(pkgre, '$1') : null\n    const rootNM = isProject && entry === 'node_modules'\n    const rootPJ = isProject && entry === 'package.json'\n\n    return (\n      // if we're in a bundled package, check with the parent.\n      /^node_modules($|\\/)/i.test(p) && !this.isProject ? this.parent.filterEntry(\n        this.basename + '/' + entry, partial)\n\n      // if package is bundled, all files included\n      // also include @scope dirs for bundled scoped deps\n      // they'll be ignored if no files end up in them.\n      // However, this only matters if we're in the root.\n      // node_modules folders elsewhere, like lib/node_modules,\n      // should be included normally unless ignored.\n      : pkg ? this.bundled.indexOf(pkg) !== -1 ||\n        this.bundledScopes.indexOf(pkg) !== -1\n\n      // only walk top node_modules if we want to bundle something\n      : rootNM ? !!this.bundled.length\n\n      // always include package.json at the root.\n      : rootPJ ? true\n\n      // always include readmes etc in any included dir\n      : packageMustHavesRE.test(entry) ? true\n\n      // npm-shrinkwrap and package.json always included in the root pkg\n      : isProject && (entry === 'npm-shrinkwrap.json' || entry === 'package.json')\n        ? true\n\n      // package-lock never included\n        : isProject && entry === 'package-lock.json' ? false\n\n        // otherwise, follow ignore-walk's logic\n        : super.filterEntry(entry, partial)\n    )\n  }\n\n  filterEntries () {\n    if (this.ignoreRules['.npmignore']) {\n      this.ignoreRules['.gitignore'] = null\n    }\n    this.filterEntries = super.filterEntries\n    super.filterEntries()\n  }\n\n  addIgnoreFile (file, then) {\n    const ig = path.resolve(this.path, file)\n    if (file === 'package.json' && !this.isProject) {\n      then()\n    } else if (this.packageJsonCache.has(ig)) {\n      this.onPackageJson(ig, this.packageJsonCache.get(ig), then)\n    } else {\n      super.addIgnoreFile(file, then)\n    }\n  }\n\n  onPackageJson (ig, pkg, then) {\n    this.packageJsonCache.set(ig, pkg)\n\n    if (Array.isArray(pkg.files)) {\n      // in this case we already included all the must-haves\n      super.onReadIgnoreFile('package.json', pkg.files.map(\n        f => '!' + f\n      ).join('\\n') + '\\n', then)\n    } else {\n      // if there's a bin, browser or main, make sure we don't ignore it\n      // also, don't ignore the package.json itself, or any files that\n      // must be included in the package.\n      const rules = this.mustHaveFilesFromPackage(pkg).map(f => `!${f}`)\n      const data = rules.join('\\n') + '\\n'\n      super.onReadIgnoreFile(packageNecessaryRules, data, then)\n    }\n  }\n\n  // override parent stat function to completely skip any filenames\n  // that will break windows entirely.\n  // XXX(isaacs) Next major version should make this an error instead.\n  stat ({ entry, file, dir }, then) {\n    if (nameIsBadForWindows(entry)) {\n      then()\n    } else {\n      super.stat({ entry, file, dir }, then)\n    }\n  }\n\n  // override parent onstat function to nix all symlinks, other than\n  // those coming out of the followed bundled symlink deps\n  onstat ({ st, entry, file, dir, isSymbolicLink }, then) {\n    if (st.isSymbolicLink()) {\n      then()\n    } else {\n      super.onstat({ st, entry, file, dir, isSymbolicLink }, then)\n    }\n  }\n\n  onReadIgnoreFile (file, data, then) {\n    if (file === 'package.json') {\n      try {\n        const ig = path.resolve(this.path, file)\n        this.onPackageJson(ig, JSON.parse(data), then)\n      } catch (er) {\n        // ignore package.json files that are not json\n        then()\n      }\n    } else {\n      super.onReadIgnoreFile(file, data, then)\n    }\n  }\n\n  sort (a, b) {\n    return sort(a, b)\n  }\n}\n\nclass Walker extends npmWalker(IgnoreWalker) {\n  globFiles (pattern, cb) {\n    glob(pattern, { dot: true, cwd: this.path, nocase: true }, cb)\n  }\n\n  readPackageJson (entries) {\n    fs.readFile(this.path + '/package.json', (er, pkg) =>\n      this.onReadPackageJson(entries, er, pkg))\n  }\n\n  walker (entry, opt, then) {\n    new Walker(this.walkerOpt(entry, opt)).on('done', then).start()\n  }\n}\n\nclass WalkerSync extends npmWalker(IgnoreWalkerSync) {\n  globFiles (pattern, cb) {\n    cb(null, glob.sync(pattern, { dot: true, cwd: this.path, nocase: true }))\n  }\n\n  readPackageJson (entries) {\n    const p = this.path + '/package.json'\n    try {\n      this.onReadPackageJson(entries, null, fs.readFileSync(p))\n    } catch (er) {\n      this.onReadPackageJson(entries, er)\n    }\n  }\n\n  walker (entry, opt, then) {\n    new WalkerSync(this.walkerOpt(entry, opt)).start()\n    then()\n  }\n}\n\nconst walk = (options, callback) => {\n  options = options || {}\n  const p = new Promise((resolve, reject) => {\n    const bw = new BundleWalker(options)\n    bw.on('done', bundled => {\n      options.bundled = bundled\n      options.packageJsonCache = bw.packageJsonCache\n      new Walker(options).on('done', resolve).on('error', reject).start()\n    })\n    bw.start()\n  })\n  return callback ? p.then(res => callback(null, res), callback) : p\n}\n\nconst walkSync = options => {\n  options = options || {}\n  const bw = new BundleWalkerSync(options).start()\n  options.bundled = bw.result\n  options.packageJsonCache = bw.packageJsonCache\n  const walker = new WalkerSync(options)\n  walker.start()\n  return walker.result\n}\n\n// optimize for compressibility\n// extname, then basename, then locale alphabetically\n// https://twitter.com/isntitvacant/status/1131094910923231232\nconst sort = (a, b) => {\n  const exta = path.extname(a).toLowerCase()\n  const extb = path.extname(b).toLowerCase()\n  const basea = path.basename(a).toLowerCase()\n  const baseb = path.basename(b).toLowerCase()\n\n  return exta.localeCompare(extb, 'en') ||\n    basea.localeCompare(baseb, 'en') ||\n    a.localeCompare(b, 'en')\n}\n\nmodule.exports = walk\nwalk.sync = walkSync\nwalk.Walker = Walker\nwalk.WalkerSync = WalkerSync\n"]},"metadata":{},"sourceType":"script"}