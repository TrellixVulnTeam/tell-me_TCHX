{"ast":null,"code":"import { ADD_DATA_TO_EDIT, ANNOUN_USER, DATA_ANNOUN, DATA_CREATE_ANNOUN, DATA_DELETE_ANNOUN, DATA_EDIT_ANNOUN, // DATA_COMMENT,\nDATA_OF_POST, DATA_USER, GET_POSTS_PAGE, POSTS, UPDATE_POST } from \"./action\";\nconst initialState = {\n  posts: [],\n  announcements: [],\n  dataPost: {}\n};\nexport const postReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_DATA_TO_EDIT:\n      const {\n        id,\n        title,\n        body,\n        userId,\n        createdAt,\n        key\n      } = action;\n      return [{\n        id,\n        title,\n        body,\n        userId,\n        createdAt,\n        key\n      }];\n\n    default:\n      return state;\n  }\n};\nexport const userReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case DATA_USER:\n      const {\n        id,\n        email,\n        firstname,\n        lastname,\n        age,\n        avatar\n      } = action;\n      console.log(email);\n      return [{\n        id,\n        email,\n        firstname,\n        lastname,\n        age,\n        avatar\n      }];\n\n    default:\n      return state;\n  }\n};\nexport const paginateReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_POSTS_PAGE:\n      return { ...state,\n        posts: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\nexport const announUserReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ANNOUN_USER:\n      return state = action.dataUser;\n\n    default:\n      return state;\n  }\n};\nexport const announcementsReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case DATA_ANNOUN:\n      return { ...state,\n        announcements: action.payload\n      };\n\n    case DATA_EDIT_ANNOUN:\n      return { ...state,\n        announcements: state.announcements.map(announ => {\n          if (announ.id === action.payload.id) {\n            return action.payload;\n          }\n\n          return announ;\n        })\n      };\n\n    case DATA_DELETE_ANNOUN:\n      return { ...state,\n        announcements: state.announcements.map(announ => {\n          if (action.payload) {//  return  null\n          }\n\n          return announ;\n        })\n      };\n\n    case DATA_CREATE_ANNOUN:\n      return { ...state,\n        announcements: state.announcements.map(announ => {\n          if (action.payload.id) {}\n\n          return announ;\n        })\n      };\n\n    default:\n      return state;\n  }\n};\nexport const dataPostReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case DATA_OF_POST:\n      return { ...state,\n        dataPost: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\nexport const posts = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case POSTS:\n      return { ...state,\n        posts: action.payload\n      };\n\n    case UPDATE_POST:\n      return { ...state,\n        posts: state.posts.map(post => {\n          if (post.id === action.payload.id) {\n            return action.payload;\n          }\n\n          return post;\n        })\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/admin/Documents/mystudy/tell-me-react/src/redux/reducer.js"],"names":["ADD_DATA_TO_EDIT","ANNOUN_USER","DATA_ANNOUN","DATA_CREATE_ANNOUN","DATA_DELETE_ANNOUN","DATA_EDIT_ANNOUN","DATA_OF_POST","DATA_USER","GET_POSTS_PAGE","POSTS","UPDATE_POST","initialState","posts","announcements","dataPost","postReducer","state","action","type","id","title","body","userId","createdAt","key","userReducer","email","firstname","lastname","age","avatar","console","log","paginateReducer","payload","announUserReducer","dataUser","announcementsReducer","map","announ","dataPostReducer","post"],"mappings":"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","sourcesContent":["import {\n  ADD_DATA_TO_EDIT,\n  ANNOUN_USER,\n  DATA_ANNOUN,\n  DATA_CREATE_ANNOUN,\n  DATA_DELETE_ANNOUN,\n  DATA_EDIT_ANNOUN,\n  // DATA_COMMENT,\n  DATA_OF_POST,\n  DATA_USER,\n  GET_POSTS_PAGE,\n  POSTS,\n  UPDATE_POST,\n} from \"./action\";\n\nconst initialState = {\n  posts: [],\n  announcements: [],\n  dataPost: {},\n};\n\nexport const postReducer = (state = [], action) => {\n  switch (action.type) {\n    case ADD_DATA_TO_EDIT:\n      const { id, title, body, userId, createdAt, key } = action;\n      return [\n        {\n          id,\n          title,\n          body,\n          userId,\n          createdAt,\n          key,\n        },\n      ];\n\n    default:\n      return state;\n  }\n};\n\nexport const userReducer = (state = [], action) => {\n  switch (action.type) {\n    case DATA_USER:\n      const { id, email, firstname, lastname, age, avatar } = action;\n      console.log(email);\n      return [\n        {\n          id,\n          email,\n          firstname,\n          lastname,\n          age,\n          avatar,\n        },\n      ];\n    default:\n      return state;\n  }\n};\n\nexport const paginateReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_POSTS_PAGE:\n      return {\n        ...state,\n        posts: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const announUserReducer = (state = [], action) => {\n  switch (action.type) {\n    case ANNOUN_USER:\n      return (state = action.dataUser);\n    default:\n      return state;\n  }\n};\nexport const announcementsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case DATA_ANNOUN:\n      return {\n        ...state,\n        announcements: action.payload,\n      };\n    case DATA_EDIT_ANNOUN:\n      return {\n        ...state,\n        announcements: state.announcements.map((announ) => {\n          if (announ.id === action.payload.id) {\n            return action.payload;\n          }\n          return announ;\n        }),\n      };\n    case DATA_DELETE_ANNOUN:\n      return {\n        ...state,\n        announcements: state.announcements.map((announ) => {\n          if (action.payload) {\n          //  return  null\n          } \n          return announ\n        }),\n      };\n    case DATA_CREATE_ANNOUN:\n      return {\n        ...state,\n        announcements: state.announcements.map((announ) => {\n          if (action.payload.id) {\n          }\n          return announ;\n        }),\n      };\n    default:\n      return state;\n  }\n};\n\nexport const dataPostReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case DATA_OF_POST:\n      return {\n        ...state,\n        dataPost: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const posts = (state = initialState, action) => {\n  switch (action.type) {\n    case POSTS:\n      return {\n        ...state,\n        posts: action.payload,\n      };\n\n    case UPDATE_POST:\n      return {\n        ...state,\n        posts: state.posts.map((post) => {\n          if (post.id === action.payload.id) {\n            return action.payload;\n          }\n          return post;\n        }),\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}