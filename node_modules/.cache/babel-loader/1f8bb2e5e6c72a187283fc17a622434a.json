{"ast":null,"code":"// Separated out for easier unit testing\nmodule.exports = async process => {\n  // set it here so that regardless of what happens later, we don't\n  // leak any private CLI configs to other programs\n  process.title = 'npm'; // We used to differentiate between known broken and unsupported\n  // versions of node and attempt to only log unsupported but still run.\n  // After we dropped node 10 support, we can use new features\n  // (like static, private, etc) which will only give vague syntax errors,\n  // so now both broken and unsupported use console, but only broken\n  // will process.exit. It is important to now perform *both* of these\n  // checks as early as possible so the user gets the error message.\n\n  const {\n    checkForBrokenNode,\n    checkForUnsupportedNode\n  } = require('./utils/unsupported.js');\n\n  checkForBrokenNode();\n  checkForUnsupportedNode();\n\n  const exitHandler = require('./utils/exit-handler.js');\n\n  process.on('uncaughtException', exitHandler);\n  process.on('unhandledRejection', exitHandler);\n\n  const Npm = require('./npm.js');\n\n  const npm = new Npm();\n  exitHandler.setNpm(npm); // if npm is called as \"npmg\" or \"npm_g\", then\n  // run in global mode.\n\n  if (process.argv[1][process.argv[1].length - 1] === 'g') {\n    process.argv.splice(1, 1, 'npm', '-g');\n  }\n\n  const log = require('./utils/log-shim.js');\n\n  const replaceInfo = require('./utils/replace-info.js');\n\n  log.verbose('cli', replaceInfo(process.argv));\n  log.info('using', 'npm@%s', npm.version);\n  log.info('using', 'node@%s', process.version);\n\n  const updateNotifier = require('./utils/update-notifier.js');\n\n  let cmd; // now actually fire up npm and run the command.\n  // this is how to use npm programmatically:\n\n  try {\n    await npm.load();\n\n    if (npm.config.get('version', 'cli')) {\n      npm.output(npm.version);\n      return exitHandler();\n    } // npm --versions=cli\n\n\n    if (npm.config.get('versions', 'cli')) {\n      npm.argv = ['version'];\n      npm.config.set('usage', false, 'cli');\n    }\n\n    updateNotifier(npm);\n    cmd = npm.argv.shift();\n\n    if (!cmd) {\n      npm.output(await npm.usage);\n      process.exitCode = 1;\n      return exitHandler();\n    }\n\n    await npm.exec(cmd, npm.argv);\n    return exitHandler();\n  } catch (err) {\n    if (err.code === 'EUNKNOWNCOMMAND') {\n      const didYouMean = require('./utils/did-you-mean.js');\n\n      const suggestions = await didYouMean(npm, npm.localPrefix, cmd);\n      npm.output(`Unknown command: \"${cmd}\"${suggestions}\\n`);\n      npm.output('To see a list of supported npm commands, run:\\n  npm help');\n      process.exitCode = 1;\n      return exitHandler();\n    }\n\n    return exitHandler(err);\n  }\n};","map":{"version":3,"sources":["/Users/admin/Documents/mystudy/react/tell-me-react/tell-me-react/node_modules/npm/lib/cli.js"],"names":["module","exports","process","title","checkForBrokenNode","checkForUnsupportedNode","require","exitHandler","on","Npm","npm","setNpm","argv","length","splice","log","replaceInfo","verbose","info","version","updateNotifier","cmd","load","config","get","output","set","shift","usage","exitCode","exec","err","code","didYouMean","suggestions","localPrefix"],"mappings":"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","sourcesContent":["// Separated out for easier unit testing\nmodule.exports = async process => {\n  // set it here so that regardless of what happens later, we don't\n  // leak any private CLI configs to other programs\n  process.title = 'npm'\n\n  // We used to differentiate between known broken and unsupported\n  // versions of node and attempt to only log unsupported but still run.\n  // After we dropped node 10 support, we can use new features\n  // (like static, private, etc) which will only give vague syntax errors,\n  // so now both broken and unsupported use console, but only broken\n  // will process.exit. It is important to now perform *both* of these\n  // checks as early as possible so the user gets the error message.\n  const { checkForBrokenNode, checkForUnsupportedNode } = require('./utils/unsupported.js')\n  checkForBrokenNode()\n  checkForUnsupportedNode()\n\n  const exitHandler = require('./utils/exit-handler.js')\n  process.on('uncaughtException', exitHandler)\n  process.on('unhandledRejection', exitHandler)\n\n  const Npm = require('./npm.js')\n  const npm = new Npm()\n  exitHandler.setNpm(npm)\n\n  // if npm is called as \"npmg\" or \"npm_g\", then\n  // run in global mode.\n  if (process.argv[1][process.argv[1].length - 1] === 'g') {\n    process.argv.splice(1, 1, 'npm', '-g')\n  }\n\n  const log = require('./utils/log-shim.js')\n  const replaceInfo = require('./utils/replace-info.js')\n  log.verbose('cli', replaceInfo(process.argv))\n\n  log.info('using', 'npm@%s', npm.version)\n  log.info('using', 'node@%s', process.version)\n\n  const updateNotifier = require('./utils/update-notifier.js')\n\n  let cmd\n  // now actually fire up npm and run the command.\n  // this is how to use npm programmatically:\n  try {\n    await npm.load()\n    if (npm.config.get('version', 'cli')) {\n      npm.output(npm.version)\n      return exitHandler()\n    }\n\n    // npm --versions=cli\n    if (npm.config.get('versions', 'cli')) {\n      npm.argv = ['version']\n      npm.config.set('usage', false, 'cli')\n    }\n\n    updateNotifier(npm)\n\n    cmd = npm.argv.shift()\n    if (!cmd) {\n      npm.output(await npm.usage)\n      process.exitCode = 1\n      return exitHandler()\n    }\n\n    await npm.exec(cmd, npm.argv)\n    return exitHandler()\n  } catch (err) {\n    if (err.code === 'EUNKNOWNCOMMAND') {\n      const didYouMean = require('./utils/did-you-mean.js')\n      const suggestions = await didYouMean(npm, npm.localPrefix, cmd)\n      npm.output(`Unknown command: \"${cmd}\"${suggestions}\\n`)\n      npm.output('To see a list of supported npm commands, run:\\n  npm help')\n      process.exitCode = 1\n      return exitHandler()\n    }\n    return exitHandler(err)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}