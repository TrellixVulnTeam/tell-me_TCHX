{"ast":null,"code":"const NPMLOG = require('npmlog');\n\nconst PROCLOG = require('proc-log'); // Sets getter and optionally a setter\n// otherwise setting should throw\n\n\nconst accessors = (obj, set) => k => ({\n  get: () => obj[k],\n  set: set ? v => obj[k] = v : () => {\n    throw new Error(`Cant set ${k}`);\n  }\n}); // Set the value to a bound function on the object\n\n\nconst value = obj => k => ({\n  value: function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return obj[k].apply(obj, args);\n  }\n});\n\nconst properties = {\n  // npmlog getters/setters\n  level: accessors(NPMLOG, true),\n  heading: accessors(NPMLOG, true),\n  levels: accessors(NPMLOG),\n  gauge: accessors(NPMLOG),\n  stream: accessors(NPMLOG),\n  tracker: accessors(NPMLOG),\n  progressEnabled: accessors(NPMLOG),\n  // npmlog methods\n  useColor: value(NPMLOG),\n  enableColor: value(NPMLOG),\n  disableColor: value(NPMLOG),\n  enableUnicode: value(NPMLOG),\n  disableUnicode: value(NPMLOG),\n  enableProgress: value(NPMLOG),\n  disableProgress: value(NPMLOG),\n  clearProgress: value(NPMLOG),\n  showProgress: value(NPMLOG),\n  newItem: value(NPMLOG),\n  newGroup: value(NPMLOG),\n  // proclog methods\n  notice: value(PROCLOG),\n  error: value(PROCLOG),\n  warn: value(PROCLOG),\n  info: value(PROCLOG),\n  verbose: value(PROCLOG),\n  http: value(PROCLOG),\n  silly: value(PROCLOG),\n  pause: value(PROCLOG),\n  resume: value(PROCLOG)\n};\nconst descriptors = Object.entries(properties).reduce((acc, _ref) => {\n  let [k, v] = _ref;\n  acc[k] = {\n    enumerable: true,\n    ...v(k)\n  };\n  return acc;\n}, {}); // Create an object with the allowed properties rom npm log and all\n// the logging methods from proc log\n// XXX: this should go away and requires of this should be replaced with proc-log + new display\n\nmodule.exports = Object.freeze(Object.defineProperties({}, descriptors));","map":{"version":3,"sources":["/Users/admin/Documents/mystudy/react/tell-me-react/tell-me-react/node_modules/npm/lib/utils/log-shim.js"],"names":["NPMLOG","require","PROCLOG","accessors","obj","set","k","get","v","Error","value","args","apply","properties","level","heading","levels","gauge","stream","tracker","progressEnabled","useColor","enableColor","disableColor","enableUnicode","disableUnicode","enableProgress","disableProgress","clearProgress","showProgress","newItem","newGroup","notice","error","warn","info","verbose","http","silly","pause","resume","descriptors","Object","entries","reduce","acc","enumerable","module","exports","freeze","defineProperties"],"mappings":"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","sourcesContent":["const NPMLOG = require('npmlog')\nconst PROCLOG = require('proc-log')\n\n// Sets getter and optionally a setter\n// otherwise setting should throw\nconst accessors = (obj, set) => (k) => ({\n  get: () => obj[k],\n  set: set ? (v) => (obj[k] = v) : () => {\n    throw new Error(`Cant set ${k}`)\n  },\n})\n\n// Set the value to a bound function on the object\nconst value = (obj) => (k) => ({\n  value: (...args) => obj[k].apply(obj, args),\n})\n\nconst properties = {\n  // npmlog getters/setters\n  level: accessors(NPMLOG, true),\n  heading: accessors(NPMLOG, true),\n  levels: accessors(NPMLOG),\n  gauge: accessors(NPMLOG),\n  stream: accessors(NPMLOG),\n  tracker: accessors(NPMLOG),\n  progressEnabled: accessors(NPMLOG),\n  // npmlog methods\n  useColor: value(NPMLOG),\n  enableColor: value(NPMLOG),\n  disableColor: value(NPMLOG),\n  enableUnicode: value(NPMLOG),\n  disableUnicode: value(NPMLOG),\n  enableProgress: value(NPMLOG),\n  disableProgress: value(NPMLOG),\n  clearProgress: value(NPMLOG),\n  showProgress: value(NPMLOG),\n  newItem: value(NPMLOG),\n  newGroup: value(NPMLOG),\n  // proclog methods\n  notice: value(PROCLOG),\n  error: value(PROCLOG),\n  warn: value(PROCLOG),\n  info: value(PROCLOG),\n  verbose: value(PROCLOG),\n  http: value(PROCLOG),\n  silly: value(PROCLOG),\n  pause: value(PROCLOG),\n  resume: value(PROCLOG),\n}\n\nconst descriptors = Object.entries(properties).reduce((acc, [k, v]) => {\n  acc[k] = { enumerable: true, ...v(k) }\n  return acc\n}, {})\n\n// Create an object with the allowed properties rom npm log and all\n// the logging methods from proc log\n// XXX: this should go away and requires of this should be replaced with proc-log + new display\nmodule.exports = Object.freeze(Object.defineProperties({}, descriptors))\n"]},"metadata":{},"sourceType":"script"}