{"ast":null,"code":"/* eslint-disable no-console */\nconst semver = require('semver');\n\nconst supported = require('../../package.json').engines.node;\n\nconst knownBroken = '<6.2.0 || 9 <9.3.0'; // Keep this file compatible with all practical versions of node\n// so we dont get syntax errors when trying to give the users\n// a nice error message. Don't use our log handler because\n// if we encounter a syntax error early on, that will never\n// get displayed to the user.\n\nconst checkVersion = exports.checkVersion = version => {\n  const versionNoPrerelease = version.replace(/-.*$/, '');\n  return {\n    version: versionNoPrerelease,\n    broken: semver.satisfies(versionNoPrerelease, knownBroken),\n    unsupported: !semver.satisfies(versionNoPrerelease, supported)\n  };\n};\n\nexports.checkForBrokenNode = () => {\n  const nodejs = checkVersion(process.version);\n\n  if (nodejs.broken) {\n    console.error('ERROR: npm is known not to run on Node.js ' + process.version);\n    console.error(\"You'll need to upgrade to a newer Node.js version in order to use this\");\n    console.error('version of npm. You can find the latest version at https://nodejs.org/');\n    process.exit(1);\n  }\n};\n\nexports.checkForUnsupportedNode = () => {\n  const nodejs = checkVersion(process.version);\n\n  if (nodejs.unsupported) {\n    console.error('npm does not support Node.js ' + process.version);\n    console.error('You should probably upgrade to a newer version of node as we');\n    console.error(\"can't make any promises that npm will work with this version.\");\n    console.error('You can find the latest version at https://nodejs.org/');\n  }\n};","map":{"version":3,"sources":["/Users/admin/Documents/mystudy/react/tell-me-react/tell-me-react/node_modules/npm/lib/utils/unsupported.js"],"names":["semver","require","supported","engines","node","knownBroken","checkVersion","exports","version","versionNoPrerelease","replace","broken","satisfies","unsupported","checkForBrokenNode","nodejs","process","console","error","exit","checkForUnsupportedNode"],"mappings":"AAAA;AACA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,oBAAD,CAAP,CAA8BE,OAA9B,CAAsCC,IAAxD;;AACA,MAAMC,WAAW,GAAG,oBAApB,C,CAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,YAAY,GAAGC,OAAO,CAACD,YAAR,GAAuBE,OAAO,IAAI;AACrD,QAAMC,mBAAmB,GAAGD,OAAO,CAACE,OAAR,CAAgB,MAAhB,EAAwB,EAAxB,CAA5B;AACA,SAAO;AACLF,IAAAA,OAAO,EAAEC,mBADJ;AAELE,IAAAA,MAAM,EAAEX,MAAM,CAACY,SAAP,CAAiBH,mBAAjB,EAAsCJ,WAAtC,CAFH;AAGLQ,IAAAA,WAAW,EAAE,CAACb,MAAM,CAACY,SAAP,CAAiBH,mBAAjB,EAAsCP,SAAtC;AAHT,GAAP;AAKD,CAPD;;AASAK,OAAO,CAACO,kBAAR,GAA6B,MAAM;AACjC,QAAMC,MAAM,GAAGT,YAAY,CAACU,OAAO,CAACR,OAAT,CAA3B;;AACA,MAAIO,MAAM,CAACJ,MAAX,EAAmB;AACjBM,IAAAA,OAAO,CAACC,KAAR,CAAc,+CAA+CF,OAAO,CAACR,OAArE;AACAS,IAAAA,OAAO,CAACC,KAAR,CAAc,wEAAd;AACAD,IAAAA,OAAO,CAACC,KAAR,CAAc,wEAAd;AACAF,IAAAA,OAAO,CAACG,IAAR,CAAa,CAAb;AACD;AACF,CARD;;AAUAZ,OAAO,CAACa,uBAAR,GAAkC,MAAM;AACtC,QAAML,MAAM,GAAGT,YAAY,CAACU,OAAO,CAACR,OAAT,CAA3B;;AACA,MAAIO,MAAM,CAACF,WAAX,EAAwB;AACtBI,IAAAA,OAAO,CAACC,KAAR,CAAc,kCAAkCF,OAAO,CAACR,OAAxD;AACAS,IAAAA,OAAO,CAACC,KAAR,CAAc,8DAAd;AACAD,IAAAA,OAAO,CAACC,KAAR,CAAc,+DAAd;AACAD,IAAAA,OAAO,CAACC,KAAR,CAAc,wDAAd;AACD;AACF,CARD","sourcesContent":["/* eslint-disable no-console */\nconst semver = require('semver')\nconst supported = require('../../package.json').engines.node\nconst knownBroken = '<6.2.0 || 9 <9.3.0'\n\n// Keep this file compatible with all practical versions of node\n// so we dont get syntax errors when trying to give the users\n// a nice error message. Don't use our log handler because\n// if we encounter a syntax error early on, that will never\n// get displayed to the user.\n\nconst checkVersion = exports.checkVersion = version => {\n  const versionNoPrerelease = version.replace(/-.*$/, '')\n  return {\n    version: versionNoPrerelease,\n    broken: semver.satisfies(versionNoPrerelease, knownBroken),\n    unsupported: !semver.satisfies(versionNoPrerelease, supported),\n  }\n}\n\nexports.checkForBrokenNode = () => {\n  const nodejs = checkVersion(process.version)\n  if (nodejs.broken) {\n    console.error('ERROR: npm is known not to run on Node.js ' + process.version)\n    console.error(\"You'll need to upgrade to a newer Node.js version in order to use this\")\n    console.error('version of npm. You can find the latest version at https://nodejs.org/')\n    process.exit(1)\n  }\n}\n\nexports.checkForUnsupportedNode = () => {\n  const nodejs = checkVersion(process.version)\n  if (nodejs.unsupported) {\n    console.error('npm does not support Node.js ' + process.version)\n    console.error('You should probably upgrade to a newer version of node as we')\n    console.error(\"can't make any promises that npm will work with this version.\")\n    console.error('You can find the latest version at https://nodejs.org/')\n  }\n}\n"]},"metadata":{},"sourceType":"script"}