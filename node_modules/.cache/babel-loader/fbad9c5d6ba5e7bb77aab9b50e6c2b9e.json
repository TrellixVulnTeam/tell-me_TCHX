{"ast":null,"code":"import { getAuth, signInWithEmailAndPassword, createUserWithEmailAndPassword } from \"firebase/auth\";\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore, collection, getDocs } from \"firebase/firestore/lite\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDIXJ5YT7hoNbBFqK3TBcV41-TzIO-7n7w\",\n  authDomain: \"fir-auth-6edd8.firebaseapp.com\",\n  projectId: \"fir-auth-6edd8\",\n  storageBucket: \"fir-auth-6edd8.appspot.com\",\n  messagingSenderId: \"904760319835\",\n  appId: \"1:904760319835:web:44fd0d957f114b4e51447e\",\n  measurementId: \"G-Q4TYKH9GG7\"\n};\nconst auth = getAuth();\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore(app);\nconst googleProvider = new firebase.auth.GoogleAuthProvider();\n\nconst signInWithGoogle = async () => {\n  try {\n    const res = await auth.signInWithPopup(googleProvider);\n    const user = res.user;\n    const query = await db.collection(\"users\").where(\"uid\", \"==\", user.uid).get();\n\n    if (query.docs.length === 0) {\n      await db.collection(\"users\").add({\n        uid: user.uid,\n        name: user.displayName,\n        authProvider: \"google\",\n        email: user.email\n      });\n    }\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nsignInWithEmailAndPassword(auth, email, password).then(userCredential => {\n  const user = userCredential.user;\n}).catch(error => {\n  const errorCode = error.code;\n  const errorMessage = error.message;\n});\ncreateUserWithEmailAndPassword(auth, email, password).then(userCredential => {\n  const user = userCredential.user;\n}).catch(error => {\n  const errorCode = error.code;\n  const errorMessage = error.message;\n});\n\nconst sendPasswordResetEmail = async email => {\n  try {\n    await auth.sendPasswordResetEmail(email);\n    alert(\"Password reset link sent!\");\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nconst logout = () => {\n  auth.signOut();\n};\n\nexport { auth, db, signInWithEmailAndPassword, createUserWithEmailAndPassword, sendPasswordResetEmail, logout };","map":{"version":3,"sources":["/Users/admin/Documents/mystudy/react/tell-me-react/src/conponents/Fire.js"],"names":["getAuth","signInWithEmailAndPassword","createUserWithEmailAndPassword","initializeApp","getFirestore","collection","getDocs","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","app","db","googleProvider","firebase","GoogleAuthProvider","signInWithGoogle","res","signInWithPopup","user","query","where","uid","get","docs","length","add","name","displayName","authProvider","email","err","console","error","alert","message","password","then","userCredential","catch","errorCode","code","errorMessage","sendPasswordResetEmail","logout","signOut"],"mappings":"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","sourcesContent":["import {\n  getAuth,\n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n} from \"firebase/auth\";\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore, collection, getDocs } from \"firebase/firestore/lite\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDIXJ5YT7hoNbBFqK3TBcV41-TzIO-7n7w\",\n  authDomain: \"fir-auth-6edd8.firebaseapp.com\",\n  projectId: \"fir-auth-6edd8\",\n  storageBucket: \"fir-auth-6edd8.appspot.com\",\n  messagingSenderId: \"904760319835\",\n  appId: \"1:904760319835:web:44fd0d957f114b4e51447e\",\n  measurementId: \"G-Q4TYKH9GG7\",\n};\nconst auth = getAuth();\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore(app);\n\nconst googleProvider = new firebase.auth.GoogleAuthProvider();\nconst signInWithGoogle = async () => {\n  try {\n    const res = await auth.signInWithPopup(googleProvider);\n    const user = res.user;\n    const query = await db\n      .collection(\"users\")\n      .where(\"uid\", \"==\", user.uid)\n      .get();\n    if (query.docs.length === 0) {\n      await db.collection(\"users\").add({\n        uid: user.uid,\n        name: user.displayName,\n        authProvider: \"google\",\n        email: user.email,\n      });\n    }\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nsignInWithEmailAndPassword(auth, email, password)\n  .then((userCredential) => {\n    const user = userCredential.user;\n  })\n  .catch((error) => {\n    const errorCode = error.code;\n    const errorMessage = error.message;\n  });\n\ncreateUserWithEmailAndPassword(auth, email, password)\n  .then((userCredential) => {\n    const user = userCredential.user;\n  })\n  .catch((error) => {\n    const errorCode = error.code;\n    const errorMessage = error.message;\n  });\n\nconst sendPasswordResetEmail = async (email) => {\n  try {\n    await auth.sendPasswordResetEmail(email);\n    alert(\"Password reset link sent!\");\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\nconst logout = () => {\n  auth.signOut();\n};\nexport {\n  auth,\n  db,\n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n  sendPasswordResetEmail,\n  logout,\n};\n"]},"metadata":{},"sourceType":"module"}