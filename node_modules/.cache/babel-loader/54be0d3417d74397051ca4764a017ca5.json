{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Library/Mobile Documents/com~apple~CloudDocs/tell-me-react/src/components/Comments.jsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport \"../scss/components/comments.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar currentdate = new Date();\nvar datetime = currentdate.getFullYear() + \"-\" + currentdate.getMonth() + \"-\" + currentdate.getDay() + \"T\" + currentdate.getHours() + \":\" + currentdate.getMinutes() + \":\" + currentdate.getSeconds();\n\nconst Comments = ({\n  postId\n}) => {\n  _s();\n\n  const [comments, setComments] = React.useState([]);\n  const [newComment, setNewComment] = React.useState(\"\");\n  const [dataComment, setDataComment] = React.useState({\n    commentId: '',\n    userId: ''\n  });\n  const [dataUserComment, setDataUserComment] = React.useState([]);\n  const [updateCommentBody, setUpdateCommentBody] = React.useState({\n    value: \"\",\n    openUptComm: false,\n    id: ''\n  }); // console.log(dataComment);\n  // let dataAboutUser = JSON.parse(localStorage.user);\n\n  React.useEffect(() => {\n    fetch(`https://ekreative-json-server.herokuapp.com/comments?postId=${postId}&_sort=createdAt&_order=asc`).then(response => response.json()).then(data => {\n      setComments(data); // data.map((comment) =>\n      //   setDataComment( comment.userId )\n      // );\n    });\n  }, []);\n  React.useEffect(() => {\n    fetch(`https://ekreative-json-server.herokuapp.com/comments/${dataComment.commentId}`).then(response => response.json()).then(data => {\n      // console.log(data);\n      setDataComment(prevState => ({ ...prevState,\n        userId: data.userId\n      }));\n    });\n  }, []);\n\n  const handleChangeUserComment = e => {\n    setNewComment(e.target.value);\n  };\n\n  const handleChange = e => {\n    setUpdateCommentBody(prevState => ({ ...prevState,\n      value: e.target.value\n    }));\n  };\n\n  const openUpdateBlock = (id, body) => {\n    setUpdateCommentBody(prevState => ({ ...prevState,\n      value: body,\n      openUptComm: true,\n      id\n    }));\n  };\n\n  const updateComment = ({\n    id,\n    postId\n  }, updateBody) => {\n    const data = {\n      body: updateBody,\n      updatedAt: datetime\n    };\n    const headers = {\n      Authorization: `Bearer ${localStorage.getItem(\"token\").slice(1, -1)}`\n    };\n    axios.patch(`https://ekreative-json-server.herokuapp.com/664/comments/${id}`, data, {\n      headers\n    });\n    setUpdateCommentBody(prevState => ({ ...prevState,\n      openUptComm: false\n    })); // window.location.reload()\n\n    updateDiv(postId);\n  };\n\n  const addComment = postId => {\n    const data = {\n      postId,\n      // userId: dataAboutUser.id,\n      body: newComment,\n      createdAt: datetime,\n      updatedAt: \"\"\n    };\n    const headers = {\n      Authorization: `Bearer ${localStorage.getItem(\"token\").slice(1, -1)}`\n    };\n    axios.post(`https://ekreative-json-server.herokuapp.com/664/comments`, data, {\n      headers\n    });\n    document.location.reload(true);\n    window.location.reload();\n    updateDiv(postId);\n  };\n\n  const deleteComment = (id, postId) => {\n    const headers = {\n      'Authorization': `Bearer ${localStorage.getItem(\"token\").slice(1, -1)}`\n    };\n    axios.delete(`https://ekreative-json-server.herokuapp.com/664/comments/${id}`, {\n      headers\n    });\n    console.log(`Bearer` + localStorage.getItem(\"token\"));\n    document.location.reload(true); // window.location.reload()\n    // updateDiv(postId)\n  }; //  console.log('dataComment',dataComment);\n\n\n  React.useEffect(() => {\n    userData();\n    return () => {\n      setDataUserComment([]); // This worked for me\n    };\n  }, []);\n\n  const userData = () => {\n    let headers = {\n      \"mode\": \"no-cors\"\n    };\n    fetch(`https://ekreative-json-server.herokuapp.com/users${dataComment.userId}`, {\n      headers\n    }).then(response => response.json()).then(data => {// setDataUserComment([data]);\n      // console.log('data',data);\n    });\n  };\n\n  const updateDiv = postId => {// document.getElementById( 'posts' ).onload(window.location.href + `#post-${postId}` );\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments-of-post\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-data\",\n      children: updateCommentBody.openUptComm && comment.id === updateCommentBody.id ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: updateCommentBody.value,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => updateComment(comment, updateCommentBody.value),\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment-content\",\n        children: [dataUserComment.map(user => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"user-of-comment\",\n          children: user.id === comment.userId ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [user.firstname, \" \", user.lastname]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 28\n          }, this) : ''\n        }, comment.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 21\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comment-content\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: comment.body\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 23\n          }, this)\n        }, comment.id + 3 + \"li\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 21\n        }, this)]\n      }, comment.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 19\n      }, this)\n    }, comment.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Comments, \"oKiU4IyzQNgAVpJdRa4iYLPsZ28=\");\n\n_c = Comments;\nexport default Comments;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"sources":["/Users/admin/Library/Mobile Documents/com~apple~CloudDocs/tell-me-react/src/components/Comments.jsx"],"names":["axios","React","useSelector","useDispatch","Link","currentdate","Date","datetime","getFullYear","getMonth","getDay","getHours","getMinutes","getSeconds","Comments","postId","comments","setComments","useState","newComment","setNewComment","dataComment","setDataComment","commentId","userId","dataUserComment","setDataUserComment","updateCommentBody","setUpdateCommentBody","value","openUptComm","id","useEffect","fetch","then","response","json","data","prevState","handleChangeUserComment","e","target","handleChange","openUpdateBlock","body","updateComment","updateBody","updatedAt","headers","Authorization","localStorage","getItem","slice","patch","updateDiv","addComment","createdAt","post","document","location","reload","window","deleteComment","delete","console","log","userData","map","comment","user","firstname","lastname"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport \"../scss/components/comments.scss\";\n\nvar currentdate = new Date();\nvar datetime =\n  currentdate.getFullYear() +\n  \"-\" +\n  currentdate.getMonth() +\n  \"-\" +\n  currentdate.getDay() +\n  \"T\" +\n  currentdate.getHours() +\n  \":\" +\n  currentdate.getMinutes() +\n  \":\" +\n  currentdate.getSeconds();\n\nconst Comments = ({ postId }) => {\n  const [comments, setComments] = React.useState([]);\n  const [newComment, setNewComment] = React.useState(\"\");\n  const [dataComment, setDataComment] = React.useState({\n    commentId: '',\n    userId:''\n  });\n  const [dataUserComment, setDataUserComment] = React.useState([]);\n  const [updateCommentBody, setUpdateCommentBody] = React.useState({\n    value: \"\",\n    openUptComm: false,\n    id: ''\n  });\n  // console.log(dataComment);\n\n    // let dataAboutUser = JSON.parse(localStorage.user);\n\n  React.useEffect(() => {\n    fetch(\n      `https://ekreative-json-server.herokuapp.com/comments?postId=${postId}&_sort=createdAt&_order=asc`\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        setComments(data);\n\n        // data.map((comment) =>\n        //   setDataComment( comment.userId )\n        // );\n      });\n  }, []);\n\n  React.useEffect(() => {\n    fetch(\n      `https://ekreative-json-server.herokuapp.com/comments/${dataComment.commentId}`\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        // console.log(data);\n\n        setDataComment(prevState => ({\n          ...prevState,\n          userId: data.userId\n          }))\n      });\n  }, []);\n\n  const handleChangeUserComment = (e) => {\n    setNewComment(e.target.value);\n  };\n\n  const handleChange = (e) => {\n    setUpdateCommentBody((prevState) => ({ ...prevState, value: e.target.value }));\n  };\n\n  const openUpdateBlock = (id, body) => {\n    setUpdateCommentBody((prevState) => ({\n      ...prevState,\n      value: body,\n      openUptComm: true,\n      id\n    }));\n  };\n\n  const updateComment = ({ id, postId }, updateBody) => {\n    const data = {\n      body: updateBody,\n      updatedAt: datetime,\n    };\n    const headers = {\n      Authorization: `Bearer ${localStorage.getItem(\"token\").slice(1, -1)}`,\n    };\n    axios.patch(\n      `https://ekreative-json-server.herokuapp.com/664/comments/${id}`,\n      data,\n      { headers }\n    );\n\n    setUpdateCommentBody((prevState) => ({\n      ...prevState,\n      openUptComm: false,\n    }));\n\n    // window.location.reload()\n    updateDiv(postId)\n  };\n\n  const addComment = (postId) => {\n    const data = {\n      postId,\n      // userId: dataAboutUser.id,\n      body: newComment,\n      createdAt: datetime,\n      updatedAt: \"\",\n    };\n\n    const headers = {\n      Authorization: `Bearer ${localStorage.getItem(\"token\").slice(1, -1)}`,\n    };\n\n    axios.post(\n      `https://ekreative-json-server.herokuapp.com/664/comments`,\n      data,\n      { headers }\n    );\n    document.location.reload(true)\n    \n    window.location.reload()\n    updateDiv(postId)\n  };\n\n  const deleteComment = (id, postId) => {\n    const headers = {\n      'Authorization': `Bearer ${localStorage.getItem(\"token\").slice(1, -1)}`,\n    };\n    axios.delete(\n      `https://ekreative-json-server.herokuapp.com/664/comments/${id}`,\n      { headers }\n    );\n      console.log(`Bearer` + localStorage.getItem(\"token\"));\n    document.location.reload(true)\n    \n    // window.location.reload()\n    // updateDiv(postId)\n  };\n\n    //  console.log('dataComment',dataComment);\n  \n  React.useEffect(() => {\n    userData();\n    return () => {\n      setDataUserComment([]); // This worked for me\n    };\n  }, []);\n  \n  const userData = () => {\n    let headers = {\n      \"mode\": \"no-cors\",\n    }\n  \n    fetch(`https://ekreative-json-server.herokuapp.com/users${dataComment.userId}`, { headers })\n      .then((response) => response.json())\n      .then((data) => {\n        // setDataUserComment([data]);\n        // console.log('data',data);\n      });\n  }\n\nconst updateDiv = (postId) =>\n{ \n    // document.getElementById( 'posts' ).onload(window.location.href + `#post-${postId}` );\n}\n\n  \n  return (\n    <div className=\"comments-of-post\">\n      <h3>comments</h3>\n      {/* {localStorage.getItem(\"token\") ? (\n        <div className=\"comment-input-block\">\n          <img\n            src={dataAboutUser.avatar}\n            alt=\"\"\n          />\n          <input type=\"text\" value={newComment} onChange={handleChangeUserComment} />\n         <Link to='#post'><button onClick={() => addComment(postId)}>&#43;</button></Link>\n        </div>\n      ) : (\n        \"\"\n      )} */}\n\n      {comments.map((comment) => (\n            <div key={comment.id} className=\"comment-data\">\n              {updateCommentBody.openUptComm && comment.id === updateCommentBody.id ? (\n                <div className=\"comment-content\">\n                  <input\n                    type=\"text\"\n                    value={updateCommentBody.value}\n                    onChange={handleChange}\n                  />\n                  <button\n                    onClick={() =>\n                  updateComment(comment, updateCommentBody.value)\n                    }\n                  >\n                    Update\n                  </button>\n                </div>\n              ) : (\n                  <div key={comment.id} className=\"comment-content\">\n                    {dataUserComment.map((user) => (\n                    <div key={comment.id} className=\"user-of-comment\">\n                      {user.id === comment.userId\n                        ? (<p>{user.firstname} {user.lastname}</p>)\n                          : ('')}\n                    </div>\n                    ))}\n                    <div key={comment.id + 3 + \"li\"} className=\"comment-content\" >\n                      <p>{comment.body}</p>\n                    {/* {localStorage.getItem('token') && dataAboutUser.id === comment.userId ? (\n                      <div key={comment.id + 1}>\n                        <button onClick={() => openUpdateBlock(comment.id, comment.body)}>\n                          Update\n                        </button>\n                        <button\n                          key={comment.id + 2}\n                          onClick={() => deleteComment(comment.id, comment.postId)}\n                        >\n                          Delete\n                        </button>\n                      </div>\n                    ) : (\n                      \"\"\n                    )} */}\n                  </div>\n                </div>\n              )}\n            </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Comments;\n"]},"metadata":{},"sourceType":"module"}