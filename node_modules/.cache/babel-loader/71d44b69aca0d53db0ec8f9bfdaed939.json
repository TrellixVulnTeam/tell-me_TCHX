{"ast":null,"code":"const EventEmitter = require('events');\n\nconst {\n  resolve,\n  dirname\n} = require('path');\n\nconst Config = require('@npmcli/config'); // Patch the global fs module here at the app level\n\n\nrequire('graceful-fs').gracefulify(require('fs'));\n\nconst {\n  definitions,\n  flatten,\n  shorthands\n} = require('./utils/config/index.js');\n\nconst {\n  shellouts\n} = require('./utils/cmd-list.js');\n\nconst usage = require('./utils/npm-usage.js');\n\nconst which = require('which');\n\nconst deref = require('./utils/deref-command.js');\n\nconst LogFile = require('./utils/log-file.js');\n\nconst Timers = require('./utils/timers.js');\n\nconst Display = require('./utils/display.js');\n\nconst log = require('./utils/log-shim');\n\nconst replaceInfo = require('./utils/replace-info.js');\n\nlet warnedNonDashArg = false;\n\nconst _load = Symbol('_load');\n\nconst _tmpFolder = Symbol('_tmpFolder');\n\nconst _title = Symbol('_title');\n\nconst pkg = require('../package.json');\n\nclass Npm extends EventEmitter {\n  static get version() {\n    return pkg.version;\n  }\n\n  #unloaded = false;\n  #timers = null;\n  #logFile = null;\n  #display = null;\n\n  constructor() {\n    super();\n    this.command = null;\n    this.#logFile = new LogFile();\n    this.#display = new Display();\n    this.#timers = new Timers({\n      start: 'npm',\n      listener: (name, ms) => {\n        const args = ['timing', name, `Completed in ${ms}ms`];\n        this.#logFile.log(...args);\n        this.#display.log(...args);\n      }\n    });\n    this.config = new Config({\n      npmPath: dirname(__dirname),\n      definitions,\n      flatten,\n      shorthands,\n      log\n    });\n    this[_title] = process.title;\n    this.updateNotification = null;\n  }\n\n  get version() {\n    return this.constructor.version;\n  }\n\n  get shelloutCommands() {\n    return shellouts;\n  }\n\n  deref(c) {\n    return deref(c);\n  } // Get an instantiated npm command\n  // npm.command is already taken as the currently running command, a refactor\n  // would be needed to change this\n\n\n  async cmd(cmd) {\n    await this.load();\n    const command = this.deref(cmd);\n\n    if (!command) {\n      throw Object.assign(new Error(`Unknown command ${cmd}`), {\n        code: 'EUNKNOWNCOMMAND'\n      });\n    }\n\n    const Impl = require(`./commands/${command}.js`);\n\n    const impl = new Impl(this);\n    return impl;\n  } // Call an npm command\n\n\n  async exec(cmd, args) {\n    const command = await this.cmd(cmd);\n    process.emit('time', `command:${cmd}`); // since 'test', 'start', 'stop', etc. commands re-enter this function\n    // to call the run-script command, we need to only set it one time.\n\n    if (!this.command) {\n      process.env.npm_command = command.name;\n      this.command = command.name;\n    } // Options are prefixed by a hyphen-minus (-, \\u2d).\n    // Other dash-type chars look similar but are invalid.\n\n\n    if (!warnedNonDashArg) {\n      args.filter(arg => /^[\\u2010-\\u2015\\u2212\\uFE58\\uFE63\\uFF0D]/.test(arg)).forEach(arg => {\n        warnedNonDashArg = true;\n        log.error('arg', 'Argument starts with non-ascii dash, this is probably invalid:', arg);\n      });\n    }\n\n    const workspacesEnabled = this.config.get('workspaces');\n    const workspacesFilters = this.config.get('workspace');\n\n    if (workspacesEnabled === false && workspacesFilters.length > 0) {\n      throw new Error('Can not use --no-workspaces and --workspace at the same time');\n    }\n\n    const filterByWorkspaces = workspacesEnabled || workspacesFilters.length > 0; // normally this would go in the constructor, but our tests don't\n    // actually use a real npm object so this.npm.config isn't always\n    // populated.  this is the compromise until we can make that a reality\n    // and then move this into the constructor.\n\n    command.workspaces = this.config.get('workspaces');\n    command.workspacePaths = null; // normally this would be evaluated in base-command#setWorkspaces, see\n    // above for explanation\n\n    command.includeWorkspaceRoot = this.config.get('include-workspace-root');\n\n    if (this.config.get('usage')) {\n      this.output(command.usage);\n      return;\n    }\n\n    if (filterByWorkspaces) {\n      if (this.config.get('global')) {\n        throw new Error('Workspaces not supported for global packages');\n      }\n\n      return command.execWorkspaces(args, this.config.get('workspace')).finally(() => {\n        process.emit('timeEnd', `command:${cmd}`);\n      });\n    } else {\n      return command.exec(args).finally(() => {\n        process.emit('timeEnd', `command:${cmd}`);\n      });\n    }\n  }\n\n  async load() {\n    if (!this.loadPromise) {\n      process.emit('time', 'npm:load');\n      this.loadPromise = new Promise((resolve, reject) => {\n        this[_load]().catch(er => er).then(er => {\n          this.loadErr = er;\n\n          if (!er && this.config.get('force')) {\n            log.warn('using --force', 'Recommended protections disabled.');\n          }\n\n          process.emit('timeEnd', 'npm:load');\n\n          if (er) {\n            return reject(er);\n          }\n\n          resolve();\n        });\n      });\n    }\n\n    return this.loadPromise;\n  }\n\n  get loaded() {\n    return this.config.loaded;\n  } // This gets called at the end of the exit handler and\n  // during any tests to cleanup all of our listeners\n  // Everything in here should be synchronous\n\n\n  unload() {\n    // Track if we've already unloaded so we dont\n    // write multiple timing files. This is only an\n    // issue in tests right now since we unload\n    // in both tap teardowns and the exit handler\n    if (this.#unloaded) {\n      return;\n    }\n\n    this.#timers.off();\n    this.#display.off();\n    this.#logFile.off();\n\n    if (this.loaded && this.config.get('timing')) {\n      this.#timers.writeFile({\n        command: process.argv.slice(2),\n        // We used to only ever report a single log file\n        // so to be backwards compatible report the last logfile\n        // XXX: remove this in npm 9 or just keep it forever\n        logfile: this.logFiles[this.logFiles.length - 1],\n        logfiles: this.logFiles,\n        version: this.version\n      });\n    }\n\n    this.#unloaded = true;\n  }\n\n  get title() {\n    return this[_title];\n  }\n\n  set title(t) {\n    process.title = t;\n    this[_title] = t;\n  }\n\n  async [_load]() {\n    process.emit('time', 'npm:load:whichnode');\n    let node;\n\n    try {\n      node = which.sync(process.argv[0]);\n    } catch {// TODO should we throw here?\n    }\n\n    process.emit('timeEnd', 'npm:load:whichnode');\n\n    if (node && node.toUpperCase() !== process.execPath.toUpperCase()) {\n      log.verbose('node symlink', node);\n      process.execPath = node;\n      this.config.execPath = node;\n    }\n\n    process.emit('time', 'npm:load:configload');\n    await this.config.load();\n    process.emit('timeEnd', 'npm:load:configload');\n    this.argv = this.config.parsedArgv.remain; // note: this MUST be shorter than the actual argv length, because it\n    // uses the same memory, so node will truncate it if it's too long.\n    // if it's a token revocation, then the argv contains a secret, so\n    // don't show that.  (Regrettable historical choice to put it there.)\n    // Any other secrets are configs only, so showing only the positional\n    // args keeps those from being leaked.\n\n    process.emit('time', 'npm:load:setTitle');\n    const tokrev = deref(this.argv[0]) === 'token' && this.argv[1] === 'revoke';\n    this.title = tokrev ? 'npm token revoke' + (this.argv[2] ? ' ***' : '') : replaceInfo(['npm', ...this.argv].join(' '));\n    process.emit('timeEnd', 'npm:load:setTitle');\n    process.emit('time', 'npm:load:display');\n    this.#display.load({\n      // Use logColor since that is based on stderr\n      color: this.logColor,\n      progress: this.flatOptions.progress,\n      timing: this.config.get('timing'),\n      loglevel: this.config.get('loglevel'),\n      unicode: this.config.get('unicode'),\n      heading: this.config.get('heading')\n    });\n    process.emit('timeEnd', 'npm:load:display');\n    process.env.COLOR = this.color ? '1' : '0';\n    process.emit('time', 'npm:load:logFile');\n    this.#logFile.load({\n      dir: resolve(this.cache, '_logs'),\n      logsMax: this.config.get('logs-max')\n    });\n    log.verbose('logfile', this.#logFile.files[0]);\n    process.emit('timeEnd', 'npm:load:logFile');\n    process.emit('time', 'npm:load:timers');\n    this.#timers.load({\n      dir: this.cache\n    });\n    process.emit('timeEnd', 'npm:load:timers');\n    process.emit('time', 'npm:load:configScope');\n    const configScope = this.config.get('scope');\n\n    if (configScope && !/^@/.test(configScope)) {\n      this.config.set('scope', `@${configScope}`, this.config.find('scope'));\n    }\n\n    process.emit('timeEnd', 'npm:load:configScope');\n  }\n\n  get flatOptions() {\n    const {\n      flat\n    } = this.config;\n\n    if (this.command) {\n      flat.npmCommand = this.command;\n    }\n\n    return flat;\n  } // color and logColor are a special derived values that takes into\n  // consideration not only the config, but whether or not we are operating\n  // in a tty with the associated output (stdout/stderr)\n\n\n  get color() {\n    return this.flatOptions.color;\n  }\n\n  get logColor() {\n    return this.flatOptions.logColor;\n  }\n\n  get lockfileVersion() {\n    return 2;\n  }\n\n  get unfinishedTimers() {\n    return this.#timers.unfinished;\n  }\n\n  get finishedTimers() {\n    return this.#timers.finished;\n  }\n\n  get started() {\n    return this.#timers.started;\n  }\n\n  get logFiles() {\n    return this.#logFile.files;\n  }\n\n  get cache() {\n    return this.config.get('cache');\n  }\n\n  set cache(r) {\n    this.config.set('cache', r);\n  }\n\n  get globalPrefix() {\n    return this.config.globalPrefix;\n  }\n\n  set globalPrefix(r) {\n    this.config.globalPrefix = r;\n  }\n\n  get localPrefix() {\n    return this.config.localPrefix;\n  }\n\n  set localPrefix(r) {\n    this.config.localPrefix = r;\n  }\n\n  get globalDir() {\n    return process.platform !== 'win32' ? resolve(this.globalPrefix, 'lib', 'node_modules') : resolve(this.globalPrefix, 'node_modules');\n  }\n\n  get localDir() {\n    return resolve(this.localPrefix, 'node_modules');\n  }\n\n  get dir() {\n    return this.config.get('global') ? this.globalDir : this.localDir;\n  }\n\n  get globalBin() {\n    const b = this.globalPrefix;\n    return process.platform !== 'win32' ? resolve(b, 'bin') : b;\n  }\n\n  get localBin() {\n    return resolve(this.dir, '.bin');\n  }\n\n  get bin() {\n    return this.config.get('global') ? this.globalBin : this.localBin;\n  }\n\n  get prefix() {\n    return this.config.get('global') ? this.globalPrefix : this.localPrefix;\n  }\n\n  set prefix(r) {\n    const k = this.config.get('global') ? 'globalPrefix' : 'localPrefix';\n    this[k] = r;\n  }\n\n  get usage() {\n    return usage(this);\n  } // XXX add logging to see if we actually use this\n\n\n  get tmp() {\n    if (!this[_tmpFolder]) {\n      const rand = require('crypto').randomBytes(4).toString('hex');\n\n      this[_tmpFolder] = `npm-${process.pid}-${rand}`;\n    }\n\n    return resolve(this.config.get('tmp'), this[_tmpFolder]);\n  } // output to stdout in a progress bar compatible way\n\n\n  output() {\n    log.clearProgress(); // eslint-disable-next-line no-console\n\n    console.log(...arguments);\n    log.showProgress();\n  }\n\n}\n\nmodule.exports = Npm;","map":{"version":3,"sources":["/Users/admin/Documents/mystudy/react/tell-me-react/tell-me-react/node_modules/npm/lib/npm.js"],"names":["EventEmitter","require","resolve","dirname","Config","gracefulify","definitions","flatten","shorthands","shellouts","usage","which","deref","LogFile","Timers","Display","log","replaceInfo","warnedNonDashArg","_load","Symbol","_tmpFolder","_title","pkg","Npm","version","unloaded","timers","logFile","display","constructor","command","start","listener","name","ms","args","config","npmPath","__dirname","process","title","updateNotification","shelloutCommands","c","cmd","load","Object","assign","Error","code","Impl","impl","exec","emit","env","npm_command","filter","arg","test","forEach","error","workspacesEnabled","get","workspacesFilters","length","filterByWorkspaces","workspaces","workspacePaths","includeWorkspaceRoot","output","execWorkspaces","finally","loadPromise","Promise","reject","catch","er","then","loadErr","warn","loaded","unload","off","writeFile","argv","slice","logfile","logFiles","logfiles","t","node","sync","toUpperCase","execPath","verbose","parsedArgv","remain","tokrev","join","color","logColor","progress","flatOptions","timing","loglevel","unicode","heading","COLOR","dir","cache","logsMax","files","configScope","set","find","flat","npmCommand","lockfileVersion","unfinishedTimers","unfinished","finishedTimers","finished","started","r","globalPrefix","localPrefix","globalDir","platform","localDir","globalBin","b","localBin","bin","prefix","k","tmp","rand","randomBytes","toString","pid","clearProgress","console","showProgress","module","exports"],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAAC,QAAD,CAA5B;;AACA,MAAM;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAuBF,OAAO,CAAC,MAAD,CAApC;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,gBAAD,CAAtB,C,CAEA;;;AACAA,OAAO,CAAC,aAAD,CAAP,CAAuBI,WAAvB,CAAmCJ,OAAO,CAAC,IAAD,CAA1C;;AAEA,MAAM;AAAEK,EAAAA,WAAF;AAAeC,EAAAA,OAAf;AAAwBC,EAAAA;AAAxB,IAAuCP,OAAO,CAAC,yBAAD,CAApD;;AACA,MAAM;AAAEQ,EAAAA;AAAF,IAAgBR,OAAO,CAAC,qBAAD,CAA7B;;AACA,MAAMS,KAAK,GAAGT,OAAO,CAAC,sBAAD,CAArB;;AAEA,MAAMU,KAAK,GAAGV,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAMW,KAAK,GAAGX,OAAO,CAAC,0BAAD,CAArB;;AACA,MAAMY,OAAO,GAAGZ,OAAO,CAAC,qBAAD,CAAvB;;AACA,MAAMa,MAAM,GAAGb,OAAO,CAAC,mBAAD,CAAtB;;AACA,MAAMc,OAAO,GAAGd,OAAO,CAAC,oBAAD,CAAvB;;AACA,MAAMe,GAAG,GAAGf,OAAO,CAAC,kBAAD,CAAnB;;AACA,MAAMgB,WAAW,GAAGhB,OAAO,CAAC,yBAAD,CAA3B;;AAEA,IAAIiB,gBAAgB,GAAG,KAAvB;;AACA,MAAMC,KAAK,GAAGC,MAAM,CAAC,OAAD,CAApB;;AACA,MAAMC,UAAU,GAAGD,MAAM,CAAC,YAAD,CAAzB;;AACA,MAAME,MAAM,GAAGF,MAAM,CAAC,QAAD,CAArB;;AACA,MAAMG,GAAG,GAAGtB,OAAO,CAAC,iBAAD,CAAnB;;AAEA,MAAMuB,GAAN,SAAkBxB,YAAlB,CAA+B;AACX,aAAPyB,OAAO,GAAI;AACpB,WAAOF,GAAG,CAACE,OAAX;AACD;;AAED,GAACC,QAAD,GAAY,KAAZ;AACA,GAACC,MAAD,GAAU,IAAV;AACA,GAACC,OAAD,GAAW,IAAX;AACA,GAACC,OAAD,GAAW,IAAX;;AAEAC,EAAAA,WAAW,GAAI;AACb;AACA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAK,CAACH,OAAN,GAAgB,IAAIf,OAAJ,EAAhB;AACA,SAAK,CAACgB,OAAN,GAAgB,IAAId,OAAJ,EAAhB;AACA,SAAK,CAACY,MAAN,GAAe,IAAIb,MAAJ,CAAW;AACxBkB,MAAAA,KAAK,EAAE,KADiB;AAExBC,MAAAA,QAAQ,EAAE,CAACC,IAAD,EAAOC,EAAP,KAAc;AACtB,cAAMC,IAAI,GAAG,CAAC,QAAD,EAAWF,IAAX,EAAkB,gBAAeC,EAAG,IAApC,CAAb;AACA,aAAK,CAACP,OAAN,CAAcZ,GAAd,CAAkB,GAAGoB,IAArB;AACA,aAAK,CAACP,OAAN,CAAcb,GAAd,CAAkB,GAAGoB,IAArB;AACD;AANuB,KAAX,CAAf;AAQA,SAAKC,MAAL,GAAc,IAAIjC,MAAJ,CAAW;AACvBkC,MAAAA,OAAO,EAAEnC,OAAO,CAACoC,SAAD,CADO;AAEvBjC,MAAAA,WAFuB;AAGvBC,MAAAA,OAHuB;AAIvBC,MAAAA,UAJuB;AAKvBQ,MAAAA;AALuB,KAAX,CAAd;AAOA,SAAKM,MAAL,IAAekB,OAAO,CAACC,KAAvB;AACA,SAAKC,kBAAL,GAA0B,IAA1B;AACD;;AAEU,MAAPjB,OAAO,GAAI;AACb,WAAO,KAAKK,WAAL,CAAiBL,OAAxB;AACD;;AAEmB,MAAhBkB,gBAAgB,GAAI;AACtB,WAAOlC,SAAP;AACD;;AAEDG,EAAAA,KAAK,CAAEgC,CAAF,EAAK;AACR,WAAOhC,KAAK,CAACgC,CAAD,CAAZ;AACD,GA5C4B,CA8C7B;AACA;AACA;;;AACS,QAAHC,GAAG,CAAEA,GAAF,EAAO;AACd,UAAM,KAAKC,IAAL,EAAN;AACA,UAAMf,OAAO,GAAG,KAAKnB,KAAL,CAAWiC,GAAX,CAAhB;;AACA,QAAI,CAACd,OAAL,EAAc;AACZ,YAAMgB,MAAM,CAACC,MAAP,CAAc,IAAIC,KAAJ,CAAW,mBAAkBJ,GAAI,EAAjC,CAAd,EAAmD;AACvDK,QAAAA,IAAI,EAAE;AADiD,OAAnD,CAAN;AAGD;;AACD,UAAMC,IAAI,GAAGlD,OAAO,CAAE,cAAa8B,OAAQ,KAAvB,CAApB;;AACA,UAAMqB,IAAI,GAAG,IAAID,IAAJ,CAAS,IAAT,CAAb;AACA,WAAOC,IAAP;AACD,GA5D4B,CA8D7B;;;AACU,QAAJC,IAAI,CAAER,GAAF,EAAOT,IAAP,EAAa;AACrB,UAAML,OAAO,GAAG,MAAM,KAAKc,GAAL,CAASA,GAAT,CAAtB;AACAL,IAAAA,OAAO,CAACc,IAAR,CAAa,MAAb,EAAsB,WAAUT,GAAI,EAApC,EAFqB,CAIrB;AACA;;AACA,QAAI,CAAC,KAAKd,OAAV,EAAmB;AACjBS,MAAAA,OAAO,CAACe,GAAR,CAAYC,WAAZ,GAA0BzB,OAAO,CAACG,IAAlC;AACA,WAAKH,OAAL,GAAeA,OAAO,CAACG,IAAvB;AACD,KAToB,CAWrB;AACA;;;AACA,QAAI,CAAChB,gBAAL,EAAuB;AACrBkB,MAAAA,IAAI,CACDqB,MADH,CACUC,GAAG,IAAI,2CAA2CC,IAA3C,CAAgDD,GAAhD,CADjB,EAEGE,OAFH,CAEWF,GAAG,IAAI;AACdxC,QAAAA,gBAAgB,GAAG,IAAnB;AACAF,QAAAA,GAAG,CAAC6C,KAAJ,CACE,KADF,EAEE,gEAFF,EAGEH,GAHF;AAKD,OATH;AAUD;;AAED,UAAMI,iBAAiB,GAAG,KAAKzB,MAAL,CAAY0B,GAAZ,CAAgB,YAAhB,CAA1B;AACA,UAAMC,iBAAiB,GAAG,KAAK3B,MAAL,CAAY0B,GAAZ,CAAgB,WAAhB,CAA1B;;AACA,QAAID,iBAAiB,KAAK,KAAtB,IAA+BE,iBAAiB,CAACC,MAAlB,GAA2B,CAA9D,EAAiE;AAC/D,YAAM,IAAIhB,KAAJ,CAAU,8DAAV,CAAN;AACD;;AAED,UAAMiB,kBAAkB,GAAGJ,iBAAiB,IAAIE,iBAAiB,CAACC,MAAlB,GAA2B,CAA3E,CAhCqB,CAiCrB;AACA;AACA;AACA;;AACAlC,IAAAA,OAAO,CAACoC,UAAR,GAAqB,KAAK9B,MAAL,CAAY0B,GAAZ,CAAgB,YAAhB,CAArB;AACAhC,IAAAA,OAAO,CAACqC,cAAR,GAAyB,IAAzB,CAtCqB,CAuCrB;AACA;;AACArC,IAAAA,OAAO,CAACsC,oBAAR,GAA+B,KAAKhC,MAAL,CAAY0B,GAAZ,CAAgB,wBAAhB,CAA/B;;AAEA,QAAI,KAAK1B,MAAL,CAAY0B,GAAZ,CAAgB,OAAhB,CAAJ,EAA8B;AAC5B,WAAKO,MAAL,CAAYvC,OAAO,CAACrB,KAApB;AACA;AACD;;AACD,QAAIwD,kBAAJ,EAAwB;AACtB,UAAI,KAAK7B,MAAL,CAAY0B,GAAZ,CAAgB,QAAhB,CAAJ,EAA+B;AAC7B,cAAM,IAAId,KAAJ,CAAU,8CAAV,CAAN;AACD;;AAED,aAAOlB,OAAO,CAACwC,cAAR,CAAuBnC,IAAvB,EAA6B,KAAKC,MAAL,CAAY0B,GAAZ,CAAgB,WAAhB,CAA7B,EAA2DS,OAA3D,CAAmE,MAAM;AAC9EhC,QAAAA,OAAO,CAACc,IAAR,CAAa,SAAb,EAAyB,WAAUT,GAAI,EAAvC;AACD,OAFM,CAAP;AAGD,KARD,MAQO;AACL,aAAOd,OAAO,CAACsB,IAAR,CAAajB,IAAb,EAAmBoC,OAAnB,CAA2B,MAAM;AACtChC,QAAAA,OAAO,CAACc,IAAR,CAAa,SAAb,EAAyB,WAAUT,GAAI,EAAvC;AACD,OAFM,CAAP;AAGD;AACF;;AAES,QAAJC,IAAI,GAAI;AACZ,QAAI,CAAC,KAAK2B,WAAV,EAAuB;AACrBjC,MAAAA,OAAO,CAACc,IAAR,CAAa,MAAb,EAAqB,UAArB;AACA,WAAKmB,WAAL,GAAmB,IAAIC,OAAJ,CAAY,CAACxE,OAAD,EAAUyE,MAAV,KAAqB;AAClD,aAAKxD,KAAL,IACGyD,KADH,CACSC,EAAE,IAAIA,EADf,EAEGC,IAFH,CAEQD,EAAE,IAAI;AACV,eAAKE,OAAL,GAAeF,EAAf;;AACA,cAAI,CAACA,EAAD,IAAO,KAAKxC,MAAL,CAAY0B,GAAZ,CAAgB,OAAhB,CAAX,EAAqC;AACnC/C,YAAAA,GAAG,CAACgE,IAAJ,CAAS,eAAT,EAA0B,mCAA1B;AACD;;AAEDxC,UAAAA,OAAO,CAACc,IAAR,CAAa,SAAb,EAAwB,UAAxB;;AACA,cAAIuB,EAAJ,EAAQ;AACN,mBAAOF,MAAM,CAACE,EAAD,CAAb;AACD;;AACD3E,UAAAA,OAAO;AACR,SAbH;AAcD,OAfkB,CAAnB;AAgBD;;AACD,WAAO,KAAKuE,WAAZ;AACD;;AAES,MAANQ,MAAM,GAAI;AACZ,WAAO,KAAK5C,MAAL,CAAY4C,MAAnB;AACD,GAtJ4B,CAwJ7B;AACA;AACA;;;AACAC,EAAAA,MAAM,GAAI;AACR;AACA;AACA;AACA;AACA,QAAI,KAAK,CAACxD,QAAV,EAAoB;AAClB;AACD;;AACD,SAAK,CAACC,MAAN,CAAawD,GAAb;AACA,SAAK,CAACtD,OAAN,CAAcsD,GAAd;AACA,SAAK,CAACvD,OAAN,CAAcuD,GAAd;;AACA,QAAI,KAAKF,MAAL,IAAe,KAAK5C,MAAL,CAAY0B,GAAZ,CAAgB,QAAhB,CAAnB,EAA8C;AAC5C,WAAK,CAACpC,MAAN,CAAayD,SAAb,CAAuB;AACrBrD,QAAAA,OAAO,EAAES,OAAO,CAAC6C,IAAR,CAAaC,KAAb,CAAmB,CAAnB,CADY;AAErB;AACA;AACA;AACAC,QAAAA,OAAO,EAAE,KAAKC,QAAL,CAAc,KAAKA,QAAL,CAAcvB,MAAd,GAAuB,CAArC,CALY;AAMrBwB,QAAAA,QAAQ,EAAE,KAAKD,QANM;AAOrB/D,QAAAA,OAAO,EAAE,KAAKA;AAPO,OAAvB;AASD;;AACD,SAAK,CAACC,QAAN,GAAiB,IAAjB;AACD;;AAEQ,MAALe,KAAK,GAAI;AACX,WAAO,KAAKnB,MAAL,CAAP;AACD;;AAEQ,MAALmB,KAAK,CAAEiD,CAAF,EAAK;AACZlD,IAAAA,OAAO,CAACC,KAAR,GAAgBiD,CAAhB;AACA,SAAKpE,MAAL,IAAeoE,CAAf;AACD;;AAEW,SAALvE,KAAK,IAAK;AACfqB,IAAAA,OAAO,CAACc,IAAR,CAAa,MAAb,EAAqB,oBAArB;AACA,QAAIqC,IAAJ;;AACA,QAAI;AACFA,MAAAA,IAAI,GAAGhF,KAAK,CAACiF,IAAN,CAAWpD,OAAO,CAAC6C,IAAR,CAAa,CAAb,CAAX,CAAP;AACD,KAFD,CAEE,MAAM,CACN;AACD;;AACD7C,IAAAA,OAAO,CAACc,IAAR,CAAa,SAAb,EAAwB,oBAAxB;;AACA,QAAIqC,IAAI,IAAIA,IAAI,CAACE,WAAL,OAAuBrD,OAAO,CAACsD,QAAR,CAAiBD,WAAjB,EAAnC,EAAmE;AACjE7E,MAAAA,GAAG,CAAC+E,OAAJ,CAAY,cAAZ,EAA4BJ,IAA5B;AACAnD,MAAAA,OAAO,CAACsD,QAAR,GAAmBH,IAAnB;AACA,WAAKtD,MAAL,CAAYyD,QAAZ,GAAuBH,IAAvB;AACD;;AAEDnD,IAAAA,OAAO,CAACc,IAAR,CAAa,MAAb,EAAqB,qBAArB;AACA,UAAM,KAAKjB,MAAL,CAAYS,IAAZ,EAAN;AACAN,IAAAA,OAAO,CAACc,IAAR,CAAa,SAAb,EAAwB,qBAAxB;AAEA,SAAK+B,IAAL,GAAY,KAAKhD,MAAL,CAAY2D,UAAZ,CAAuBC,MAAnC,CAnBe,CAoBf;AACA;AACA;AACA;AACA;AACA;;AACAzD,IAAAA,OAAO,CAACc,IAAR,CAAa,MAAb,EAAqB,mBAArB;AACA,UAAM4C,MAAM,GAAGtF,KAAK,CAAC,KAAKyE,IAAL,CAAU,CAAV,CAAD,CAAL,KAAwB,OAAxB,IAAmC,KAAKA,IAAL,CAAU,CAAV,MAAiB,QAAnE;AACA,SAAK5C,KAAL,GAAayD,MAAM,GACf,sBAAsB,KAAKb,IAAL,CAAU,CAAV,IAAe,MAAf,GAAwB,EAA9C,CADe,GAEfpE,WAAW,CAAC,CAAC,KAAD,EAAQ,GAAG,KAAKoE,IAAhB,EAAsBc,IAAtB,CAA2B,GAA3B,CAAD,CAFf;AAGA3D,IAAAA,OAAO,CAACc,IAAR,CAAa,SAAb,EAAwB,mBAAxB;AAEAd,IAAAA,OAAO,CAACc,IAAR,CAAa,MAAb,EAAqB,kBAArB;AACA,SAAK,CAACzB,OAAN,CAAciB,IAAd,CAAmB;AACjB;AACAsD,MAAAA,KAAK,EAAE,KAAKC,QAFK;AAGjBC,MAAAA,QAAQ,EAAE,KAAKC,WAAL,CAAiBD,QAHV;AAIjBE,MAAAA,MAAM,EAAE,KAAKnE,MAAL,CAAY0B,GAAZ,CAAgB,QAAhB,CAJS;AAKjB0C,MAAAA,QAAQ,EAAE,KAAKpE,MAAL,CAAY0B,GAAZ,CAAgB,UAAhB,CALO;AAMjB2C,MAAAA,OAAO,EAAE,KAAKrE,MAAL,CAAY0B,GAAZ,CAAgB,SAAhB,CANQ;AAOjB4C,MAAAA,OAAO,EAAE,KAAKtE,MAAL,CAAY0B,GAAZ,CAAgB,SAAhB;AAPQ,KAAnB;AASAvB,IAAAA,OAAO,CAACc,IAAR,CAAa,SAAb,EAAwB,kBAAxB;AACAd,IAAAA,OAAO,CAACe,GAAR,CAAYqD,KAAZ,GAAoB,KAAKR,KAAL,GAAa,GAAb,GAAmB,GAAvC;AAEA5D,IAAAA,OAAO,CAACc,IAAR,CAAa,MAAb,EAAqB,kBAArB;AACA,SAAK,CAAC1B,OAAN,CAAckB,IAAd,CAAmB;AACjB+D,MAAAA,GAAG,EAAE3G,OAAO,CAAC,KAAK4G,KAAN,EAAa,OAAb,CADK;AAEjBC,MAAAA,OAAO,EAAE,KAAK1E,MAAL,CAAY0B,GAAZ,CAAgB,UAAhB;AAFQ,KAAnB;AAIA/C,IAAAA,GAAG,CAAC+E,OAAJ,CAAY,SAAZ,EAAuB,KAAK,CAACnE,OAAN,CAAcoF,KAAd,CAAoB,CAApB,CAAvB;AACAxE,IAAAA,OAAO,CAACc,IAAR,CAAa,SAAb,EAAwB,kBAAxB;AAEAd,IAAAA,OAAO,CAACc,IAAR,CAAa,MAAb,EAAqB,iBAArB;AACA,SAAK,CAAC3B,MAAN,CAAamB,IAAb,CAAkB;AAChB+D,MAAAA,GAAG,EAAE,KAAKC;AADM,KAAlB;AAGAtE,IAAAA,OAAO,CAACc,IAAR,CAAa,SAAb,EAAwB,iBAAxB;AAEAd,IAAAA,OAAO,CAACc,IAAR,CAAa,MAAb,EAAqB,sBAArB;AACA,UAAM2D,WAAW,GAAG,KAAK5E,MAAL,CAAY0B,GAAZ,CAAgB,OAAhB,CAApB;;AACA,QAAIkD,WAAW,IAAI,CAAC,KAAKtD,IAAL,CAAUsD,WAAV,CAApB,EAA4C;AAC1C,WAAK5E,MAAL,CAAY6E,GAAZ,CAAgB,OAAhB,EAA0B,IAAGD,WAAY,EAAzC,EAA4C,KAAK5E,MAAL,CAAY8E,IAAZ,CAAiB,OAAjB,CAA5C;AACD;;AACD3E,IAAAA,OAAO,CAACc,IAAR,CAAa,SAAb,EAAwB,sBAAxB;AACD;;AAEc,MAAXiD,WAAW,GAAI;AACjB,UAAM;AAAEa,MAAAA;AAAF,QAAW,KAAK/E,MAAtB;;AACA,QAAI,KAAKN,OAAT,EAAkB;AAChBqF,MAAAA,IAAI,CAACC,UAAL,GAAkB,KAAKtF,OAAvB;AACD;;AACD,WAAOqF,IAAP;AACD,GAvQ4B,CAyQ7B;AACA;AACA;;;AACS,MAALhB,KAAK,GAAI;AACX,WAAO,KAAKG,WAAL,CAAiBH,KAAxB;AACD;;AAEW,MAARC,QAAQ,GAAI;AACd,WAAO,KAAKE,WAAL,CAAiBF,QAAxB;AACD;;AAEkB,MAAfiB,eAAe,GAAI;AACrB,WAAO,CAAP;AACD;;AAEmB,MAAhBC,gBAAgB,GAAI;AACtB,WAAO,KAAK,CAAC5F,MAAN,CAAa6F,UAApB;AACD;;AAEiB,MAAdC,cAAc,GAAI;AACpB,WAAO,KAAK,CAAC9F,MAAN,CAAa+F,QAApB;AACD;;AAEU,MAAPC,OAAO,GAAI;AACb,WAAO,KAAK,CAAChG,MAAN,CAAagG,OAApB;AACD;;AAEW,MAARnC,QAAQ,GAAI;AACd,WAAO,KAAK,CAAC5D,OAAN,CAAcoF,KAArB;AACD;;AAEQ,MAALF,KAAK,GAAI;AACX,WAAO,KAAKzE,MAAL,CAAY0B,GAAZ,CAAgB,OAAhB,CAAP;AACD;;AAEQ,MAAL+C,KAAK,CAAEc,CAAF,EAAK;AACZ,SAAKvF,MAAL,CAAY6E,GAAZ,CAAgB,OAAhB,EAAyBU,CAAzB;AACD;;AAEe,MAAZC,YAAY,GAAI;AAClB,WAAO,KAAKxF,MAAL,CAAYwF,YAAnB;AACD;;AAEe,MAAZA,YAAY,CAAED,CAAF,EAAK;AACnB,SAAKvF,MAAL,CAAYwF,YAAZ,GAA2BD,CAA3B;AACD;;AAEc,MAAXE,WAAW,GAAI;AACjB,WAAO,KAAKzF,MAAL,CAAYyF,WAAnB;AACD;;AAEc,MAAXA,WAAW,CAAEF,CAAF,EAAK;AAClB,SAAKvF,MAAL,CAAYyF,WAAZ,GAA0BF,CAA1B;AACD;;AAEY,MAATG,SAAS,GAAI;AACf,WAAOvF,OAAO,CAACwF,QAAR,KAAqB,OAArB,GACH9H,OAAO,CAAC,KAAK2H,YAAN,EAAoB,KAApB,EAA2B,cAA3B,CADJ,GAEH3H,OAAO,CAAC,KAAK2H,YAAN,EAAoB,cAApB,CAFX;AAGD;;AAEW,MAARI,QAAQ,GAAI;AACd,WAAO/H,OAAO,CAAC,KAAK4H,WAAN,EAAmB,cAAnB,CAAd;AACD;;AAEM,MAAHjB,GAAG,GAAI;AACT,WAAO,KAAKxE,MAAL,CAAY0B,GAAZ,CAAgB,QAAhB,IAA4B,KAAKgE,SAAjC,GAA6C,KAAKE,QAAzD;AACD;;AAEY,MAATC,SAAS,GAAI;AACf,UAAMC,CAAC,GAAG,KAAKN,YAAf;AACA,WAAOrF,OAAO,CAACwF,QAAR,KAAqB,OAArB,GAA+B9H,OAAO,CAACiI,CAAD,EAAI,KAAJ,CAAtC,GAAmDA,CAA1D;AACD;;AAEW,MAARC,QAAQ,GAAI;AACd,WAAOlI,OAAO,CAAC,KAAK2G,GAAN,EAAW,MAAX,CAAd;AACD;;AAEM,MAAHwB,GAAG,GAAI;AACT,WAAO,KAAKhG,MAAL,CAAY0B,GAAZ,CAAgB,QAAhB,IAA4B,KAAKmE,SAAjC,GAA6C,KAAKE,QAAzD;AACD;;AAES,MAANE,MAAM,GAAI;AACZ,WAAO,KAAKjG,MAAL,CAAY0B,GAAZ,CAAgB,QAAhB,IAA4B,KAAK8D,YAAjC,GAAgD,KAAKC,WAA5D;AACD;;AAES,MAANQ,MAAM,CAAEV,CAAF,EAAK;AACb,UAAMW,CAAC,GAAG,KAAKlG,MAAL,CAAY0B,GAAZ,CAAgB,QAAhB,IAA4B,cAA5B,GAA6C,aAAvD;AACA,SAAKwE,CAAL,IAAUX,CAAV;AACD;;AAEQ,MAALlH,KAAK,GAAI;AACX,WAAOA,KAAK,CAAC,IAAD,CAAZ;AACD,GAtW4B,CAwW7B;;;AACO,MAAH8H,GAAG,GAAI;AACT,QAAI,CAAC,KAAKnH,UAAL,CAAL,EAAuB;AACrB,YAAMoH,IAAI,GAAGxI,OAAO,CAAC,QAAD,CAAP,CAAkByI,WAAlB,CAA8B,CAA9B,EAAiCC,QAAjC,CAA0C,KAA1C,CAAb;;AACA,WAAKtH,UAAL,IAAoB,OAAMmB,OAAO,CAACoG,GAAI,IAAGH,IAAK,EAA9C;AACD;;AACD,WAAOvI,OAAO,CAAC,KAAKmC,MAAL,CAAY0B,GAAZ,CAAgB,KAAhB,CAAD,EAAyB,KAAK1C,UAAL,CAAzB,CAAd;AACD,GA/W4B,CAiX7B;;;AACAiD,EAAAA,MAAM,GAAU;AACdtD,IAAAA,GAAG,CAAC6H,aAAJ,GADc,CAEd;;AACAC,IAAAA,OAAO,CAAC9H,GAAR,CAAY,YAAZ;AACAA,IAAAA,GAAG,CAAC+H,YAAJ;AACD;;AAvX4B;;AAyX/BC,MAAM,CAACC,OAAP,GAAiBzH,GAAjB","sourcesContent":["const EventEmitter = require('events')\nconst { resolve, dirname } = require('path')\nconst Config = require('@npmcli/config')\n\n// Patch the global fs module here at the app level\nrequire('graceful-fs').gracefulify(require('fs'))\n\nconst { definitions, flatten, shorthands } = require('./utils/config/index.js')\nconst { shellouts } = require('./utils/cmd-list.js')\nconst usage = require('./utils/npm-usage.js')\n\nconst which = require('which')\n\nconst deref = require('./utils/deref-command.js')\nconst LogFile = require('./utils/log-file.js')\nconst Timers = require('./utils/timers.js')\nconst Display = require('./utils/display.js')\nconst log = require('./utils/log-shim')\nconst replaceInfo = require('./utils/replace-info.js')\n\nlet warnedNonDashArg = false\nconst _load = Symbol('_load')\nconst _tmpFolder = Symbol('_tmpFolder')\nconst _title = Symbol('_title')\nconst pkg = require('../package.json')\n\nclass Npm extends EventEmitter {\n  static get version () {\n    return pkg.version\n  }\n\n  #unloaded = false\n  #timers = null\n  #logFile = null\n  #display = null\n\n  constructor () {\n    super()\n    this.command = null\n    this.#logFile = new LogFile()\n    this.#display = new Display()\n    this.#timers = new Timers({\n      start: 'npm',\n      listener: (name, ms) => {\n        const args = ['timing', name, `Completed in ${ms}ms`]\n        this.#logFile.log(...args)\n        this.#display.log(...args)\n      },\n    })\n    this.config = new Config({\n      npmPath: dirname(__dirname),\n      definitions,\n      flatten,\n      shorthands,\n      log,\n    })\n    this[_title] = process.title\n    this.updateNotification = null\n  }\n\n  get version () {\n    return this.constructor.version\n  }\n\n  get shelloutCommands () {\n    return shellouts\n  }\n\n  deref (c) {\n    return deref(c)\n  }\n\n  // Get an instantiated npm command\n  // npm.command is already taken as the currently running command, a refactor\n  // would be needed to change this\n  async cmd (cmd) {\n    await this.load()\n    const command = this.deref(cmd)\n    if (!command) {\n      throw Object.assign(new Error(`Unknown command ${cmd}`), {\n        code: 'EUNKNOWNCOMMAND',\n      })\n    }\n    const Impl = require(`./commands/${command}.js`)\n    const impl = new Impl(this)\n    return impl\n  }\n\n  // Call an npm command\n  async exec (cmd, args) {\n    const command = await this.cmd(cmd)\n    process.emit('time', `command:${cmd}`)\n\n    // since 'test', 'start', 'stop', etc. commands re-enter this function\n    // to call the run-script command, we need to only set it one time.\n    if (!this.command) {\n      process.env.npm_command = command.name\n      this.command = command.name\n    }\n\n    // Options are prefixed by a hyphen-minus (-, \\u2d).\n    // Other dash-type chars look similar but are invalid.\n    if (!warnedNonDashArg) {\n      args\n        .filter(arg => /^[\\u2010-\\u2015\\u2212\\uFE58\\uFE63\\uFF0D]/.test(arg))\n        .forEach(arg => {\n          warnedNonDashArg = true\n          log.error(\n            'arg',\n            'Argument starts with non-ascii dash, this is probably invalid:',\n            arg\n          )\n        })\n    }\n\n    const workspacesEnabled = this.config.get('workspaces')\n    const workspacesFilters = this.config.get('workspace')\n    if (workspacesEnabled === false && workspacesFilters.length > 0) {\n      throw new Error('Can not use --no-workspaces and --workspace at the same time')\n    }\n\n    const filterByWorkspaces = workspacesEnabled || workspacesFilters.length > 0\n    // normally this would go in the constructor, but our tests don't\n    // actually use a real npm object so this.npm.config isn't always\n    // populated.  this is the compromise until we can make that a reality\n    // and then move this into the constructor.\n    command.workspaces = this.config.get('workspaces')\n    command.workspacePaths = null\n    // normally this would be evaluated in base-command#setWorkspaces, see\n    // above for explanation\n    command.includeWorkspaceRoot = this.config.get('include-workspace-root')\n\n    if (this.config.get('usage')) {\n      this.output(command.usage)\n      return\n    }\n    if (filterByWorkspaces) {\n      if (this.config.get('global')) {\n        throw new Error('Workspaces not supported for global packages')\n      }\n\n      return command.execWorkspaces(args, this.config.get('workspace')).finally(() => {\n        process.emit('timeEnd', `command:${cmd}`)\n      })\n    } else {\n      return command.exec(args).finally(() => {\n        process.emit('timeEnd', `command:${cmd}`)\n      })\n    }\n  }\n\n  async load () {\n    if (!this.loadPromise) {\n      process.emit('time', 'npm:load')\n      this.loadPromise = new Promise((resolve, reject) => {\n        this[_load]()\n          .catch(er => er)\n          .then(er => {\n            this.loadErr = er\n            if (!er && this.config.get('force')) {\n              log.warn('using --force', 'Recommended protections disabled.')\n            }\n\n            process.emit('timeEnd', 'npm:load')\n            if (er) {\n              return reject(er)\n            }\n            resolve()\n          })\n      })\n    }\n    return this.loadPromise\n  }\n\n  get loaded () {\n    return this.config.loaded\n  }\n\n  // This gets called at the end of the exit handler and\n  // during any tests to cleanup all of our listeners\n  // Everything in here should be synchronous\n  unload () {\n    // Track if we've already unloaded so we dont\n    // write multiple timing files. This is only an\n    // issue in tests right now since we unload\n    // in both tap teardowns and the exit handler\n    if (this.#unloaded) {\n      return\n    }\n    this.#timers.off()\n    this.#display.off()\n    this.#logFile.off()\n    if (this.loaded && this.config.get('timing')) {\n      this.#timers.writeFile({\n        command: process.argv.slice(2),\n        // We used to only ever report a single log file\n        // so to be backwards compatible report the last logfile\n        // XXX: remove this in npm 9 or just keep it forever\n        logfile: this.logFiles[this.logFiles.length - 1],\n        logfiles: this.logFiles,\n        version: this.version,\n      })\n    }\n    this.#unloaded = true\n  }\n\n  get title () {\n    return this[_title]\n  }\n\n  set title (t) {\n    process.title = t\n    this[_title] = t\n  }\n\n  async [_load] () {\n    process.emit('time', 'npm:load:whichnode')\n    let node\n    try {\n      node = which.sync(process.argv[0])\n    } catch {\n      // TODO should we throw here?\n    }\n    process.emit('timeEnd', 'npm:load:whichnode')\n    if (node && node.toUpperCase() !== process.execPath.toUpperCase()) {\n      log.verbose('node symlink', node)\n      process.execPath = node\n      this.config.execPath = node\n    }\n\n    process.emit('time', 'npm:load:configload')\n    await this.config.load()\n    process.emit('timeEnd', 'npm:load:configload')\n\n    this.argv = this.config.parsedArgv.remain\n    // note: this MUST be shorter than the actual argv length, because it\n    // uses the same memory, so node will truncate it if it's too long.\n    // if it's a token revocation, then the argv contains a secret, so\n    // don't show that.  (Regrettable historical choice to put it there.)\n    // Any other secrets are configs only, so showing only the positional\n    // args keeps those from being leaked.\n    process.emit('time', 'npm:load:setTitle')\n    const tokrev = deref(this.argv[0]) === 'token' && this.argv[1] === 'revoke'\n    this.title = tokrev\n      ? 'npm token revoke' + (this.argv[2] ? ' ***' : '')\n      : replaceInfo(['npm', ...this.argv].join(' '))\n    process.emit('timeEnd', 'npm:load:setTitle')\n\n    process.emit('time', 'npm:load:display')\n    this.#display.load({\n      // Use logColor since that is based on stderr\n      color: this.logColor,\n      progress: this.flatOptions.progress,\n      timing: this.config.get('timing'),\n      loglevel: this.config.get('loglevel'),\n      unicode: this.config.get('unicode'),\n      heading: this.config.get('heading'),\n    })\n    process.emit('timeEnd', 'npm:load:display')\n    process.env.COLOR = this.color ? '1' : '0'\n\n    process.emit('time', 'npm:load:logFile')\n    this.#logFile.load({\n      dir: resolve(this.cache, '_logs'),\n      logsMax: this.config.get('logs-max'),\n    })\n    log.verbose('logfile', this.#logFile.files[0])\n    process.emit('timeEnd', 'npm:load:logFile')\n\n    process.emit('time', 'npm:load:timers')\n    this.#timers.load({\n      dir: this.cache,\n    })\n    process.emit('timeEnd', 'npm:load:timers')\n\n    process.emit('time', 'npm:load:configScope')\n    const configScope = this.config.get('scope')\n    if (configScope && !/^@/.test(configScope)) {\n      this.config.set('scope', `@${configScope}`, this.config.find('scope'))\n    }\n    process.emit('timeEnd', 'npm:load:configScope')\n  }\n\n  get flatOptions () {\n    const { flat } = this.config\n    if (this.command) {\n      flat.npmCommand = this.command\n    }\n    return flat\n  }\n\n  // color and logColor are a special derived values that takes into\n  // consideration not only the config, but whether or not we are operating\n  // in a tty with the associated output (stdout/stderr)\n  get color () {\n    return this.flatOptions.color\n  }\n\n  get logColor () {\n    return this.flatOptions.logColor\n  }\n\n  get lockfileVersion () {\n    return 2\n  }\n\n  get unfinishedTimers () {\n    return this.#timers.unfinished\n  }\n\n  get finishedTimers () {\n    return this.#timers.finished\n  }\n\n  get started () {\n    return this.#timers.started\n  }\n\n  get logFiles () {\n    return this.#logFile.files\n  }\n\n  get cache () {\n    return this.config.get('cache')\n  }\n\n  set cache (r) {\n    this.config.set('cache', r)\n  }\n\n  get globalPrefix () {\n    return this.config.globalPrefix\n  }\n\n  set globalPrefix (r) {\n    this.config.globalPrefix = r\n  }\n\n  get localPrefix () {\n    return this.config.localPrefix\n  }\n\n  set localPrefix (r) {\n    this.config.localPrefix = r\n  }\n\n  get globalDir () {\n    return process.platform !== 'win32'\n      ? resolve(this.globalPrefix, 'lib', 'node_modules')\n      : resolve(this.globalPrefix, 'node_modules')\n  }\n\n  get localDir () {\n    return resolve(this.localPrefix, 'node_modules')\n  }\n\n  get dir () {\n    return this.config.get('global') ? this.globalDir : this.localDir\n  }\n\n  get globalBin () {\n    const b = this.globalPrefix\n    return process.platform !== 'win32' ? resolve(b, 'bin') : b\n  }\n\n  get localBin () {\n    return resolve(this.dir, '.bin')\n  }\n\n  get bin () {\n    return this.config.get('global') ? this.globalBin : this.localBin\n  }\n\n  get prefix () {\n    return this.config.get('global') ? this.globalPrefix : this.localPrefix\n  }\n\n  set prefix (r) {\n    const k = this.config.get('global') ? 'globalPrefix' : 'localPrefix'\n    this[k] = r\n  }\n\n  get usage () {\n    return usage(this)\n  }\n\n  // XXX add logging to see if we actually use this\n  get tmp () {\n    if (!this[_tmpFolder]) {\n      const rand = require('crypto').randomBytes(4).toString('hex')\n      this[_tmpFolder] = `npm-${process.pid}-${rand}`\n    }\n    return resolve(this.config.get('tmp'), this[_tmpFolder])\n  }\n\n  // output to stdout in a progress bar compatible way\n  output (...msg) {\n    log.clearProgress()\n    // eslint-disable-next-line no-console\n    console.log(...msg)\n    log.showProgress()\n  }\n}\nmodule.exports = Npm\n"]},"metadata":{},"sourceType":"script"}