{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/mystudy/tell-me-react/src/components/Post.jsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport classNames from \"classnames\";\nimport React from \"react\";\nimport \"../scss/components/post.scss\";\nimport \"../scss/components/comments.scss\";\nimport { useSelector } from \"react-redux\";\nimport { Comment } from \"./index\";\nimport { Link } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { setComments, setDataCreateComment, setDataDeletePost, setDataOfPost // setUserData,\n} from \"../redux/action\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar currentdate = new Date();\nvar datetime = currentdate.getFullYear() + \"-\" + currentdate.getMonth() + \"-\" + currentdate.getDay() + \"T\" + currentdate.getHours() + \":\" + currentdate.getMinutes() + \":\" + currentdate.getSeconds();\n\nconst Post = () => {\n  _s();\n\n  const [newComment, setNewComment] = React.useState(\"\");\n  const [updPost, setUpdPost] = React.useState({\n    body: \"\",\n    title: \"\",\n    openEdit: false,\n    response: {}\n  });\n  const dataPost = useSelector(state => state.posts.dataPost);\n  const comments = useSelector(state => state.commentsReducer.comments); // const usersData = useSelector((state) => state.userData.userData);\n  // console.log(usersData);\n\n  let dataAboutUser = JSON.parse(localStorage.user);\n  let idPost = JSON.parse(localStorage.idPost);\n  const dispatch = useDispatch();\n  React.useEffect(() => {\n    fetch(`https://ekreative-json-server.herokuapp.com/comments?postId=${idPost}&_sort=createdAt&_order=asc`).then(response => response.json()).then(data => dispatch(setComments(data)));\n  }, [idPost, dispatch]);\n\n  const isEmptyObject = obj => {\n    for (let property in obj) {\n      if (obj.hasOwnProperty(property)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  React.useEffect(() => {\n    fetch(`https://ekreative-json-server.herokuapp.com/664/posts`).then(response => response.json()).then(data => {\n      if (isEmptyObject(dataPost)) {\n        dispatch(setDataOfPost(data.find(obj => obj.id === idPost))); //  dispatch(setUserData(data.find(obj => obj.id === idPost)));\n      }\n    });\n  });\n\n  const updatePost = async (title, body) => {\n    const data = {\n      title,\n      body,\n      updateAt: datetime\n    };\n    const headers = {\n      Authorization: `Bearer ${localStorage.getItem(\"token\").slice(1, -1)}`\n    };\n    axios.patch(`https://ekreative-json-server.herokuapp.com/664/posts/${dataPost.id}`, data, {\n      headers\n    }).then(response => dispatch(setDataOfPost(response.data)));\n    setUpdPost(prevState => ({ ...prevState,\n      openEdit: false\n    }));\n  };\n\n  const deletePost = id => {\n    const headers = {\n      Authorization: `Bearer ${localStorage.getItem(\"token\").slice(1, -1)}`\n    };\n    axios.delete(`https://ekreative-json-server.herokuapp.com/664/posts/${id}`, {\n      headers\n    });\n    dispatch(setDataDeletePost(id));\n  };\n\n  const openEditPost = (body, title) => {\n    setUpdPost({\n      body,\n      title,\n      openEdit: true\n    });\n  };\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setUpdPost(prevState => ({ ...prevState,\n      [name]: value\n    }));\n  };\n\n  const handleChangeUserComment = e => {\n    e.preventDefault();\n    setNewComment(e.target.value);\n  };\n\n  const addComment = postId => {\n    setNewComment(\"\");\n    const data = {\n      postId,\n      body: newComment,\n      createdAt: datetime,\n      updatedAt: \"\",\n      userId: dataAboutUser.id\n    };\n    const headers = {\n      Authorization: `Bearer ${localStorage.getItem(\"token\").slice(1, -1)}`\n    };\n    axios.post(`https://ekreative-json-server.herokuapp.com/664/comments`, data, {\n      headers\n    }).then(response => dispatch(setDataCreateComment(response.data)));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"post\",\n    id: `post-${dataPost.id}`,\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: \"logo\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"logo\",\n        children: [\"Tell \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"me\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), updPost.openEdit ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-post-edit\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input-title\",\n        value: updPost.title,\n        onChange: handleChange,\n        name: \"title\",\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"input-body\",\n        value: updPost.body,\n        onChange: handleChange,\n        name: \"body\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classNames(\"button-post\", \"button\"),\n        onClick: () => updatePost(updPost.title, updPost.body, dataPost.id),\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-post\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: dataPost.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"post-body\",\n            children: dataPost.body\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bottom-content\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comments-of-post\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"comments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }, this), comments.map(comment => /*#__PURE__*/_jsxDEV(Comment, { ...comment\n        }, comment.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 15\n        }, this)), localStorage.getItem(\"token\") ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comment-input-block\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: dataAboutUser.avatar,\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newComment,\n            onChange: handleChangeUserComment\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              addComment(dataPost.id);\n            },\n            children: \"+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 15\n        }, this) : \"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Post, \"trJNp+4ro/ZjinNvb2V4PEbFA14=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = Post;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/admin/Documents/mystudy/tell-me-react/src/components/Post.jsx"],"names":["axios","classNames","React","useSelector","Comment","Link","useDispatch","setComments","setDataCreateComment","setDataDeletePost","setDataOfPost","currentdate","Date","datetime","getFullYear","getMonth","getDay","getHours","getMinutes","getSeconds","Post","newComment","setNewComment","useState","updPost","setUpdPost","body","title","openEdit","response","dataPost","state","posts","comments","commentsReducer","dataAboutUser","JSON","parse","localStorage","user","idPost","dispatch","useEffect","fetch","then","json","data","isEmptyObject","obj","property","hasOwnProperty","find","id","updatePost","updateAt","headers","Authorization","getItem","slice","patch","prevState","deletePost","delete","openEditPost","handleChange","e","name","value","target","handleChangeUserComment","preventDefault","addComment","postId","createdAt","updatedAt","userId","post","map","comment","avatar"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport classNames from \"classnames\";\nimport React from \"react\";\n\nimport \"../scss/components/post.scss\";\nimport \"../scss/components/comments.scss\";\n\nimport { useSelector } from \"react-redux\";\nimport { Comment } from \"./index\";\nimport { Link } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  setComments,\n  setDataCreateComment,\n  setDataDeletePost,\n  setDataOfPost,\n  // setUserData,\n} from \"../redux/action\";\n\nvar currentdate = new Date();\nvar datetime =\n  currentdate.getFullYear() +\n  \"-\" +\n  currentdate.getMonth() +\n  \"-\" +\n  currentdate.getDay() +\n  \"T\" +\n  currentdate.getHours() +\n  \":\" +\n  currentdate.getMinutes() +\n  \":\" +\n  currentdate.getSeconds();\n\nconst Post = () => {\n  const [newComment, setNewComment] = React.useState(\"\");\n  const [updPost, setUpdPost] = React.useState({\n    body: \"\",\n    title: \"\",\n    openEdit: false,\n    response: {},\n  });\n\n  const dataPost = useSelector((state) => state.posts.dataPost);\n  const comments = useSelector((state) => state.commentsReducer.comments);\n  // const usersData = useSelector((state) => state.userData.userData);\n\n// console.log(usersData);\n\n  let dataAboutUser = JSON.parse(localStorage.user);\n  let idPost = JSON.parse(localStorage.idPost);\n\n  const dispatch = useDispatch();\n\n\n  React.useEffect(() => {\n    fetch(\n      `https://ekreative-json-server.herokuapp.com/comments?postId=${idPost}&_sort=createdAt&_order=asc`\n    )\n      .then((response) => response.json())\n      .then((data) => dispatch(setComments(data)));\n  }, [idPost, dispatch]);\n\n\n  const isEmptyObject = (obj) => {\n    for (let property in obj) {\n      if (obj.hasOwnProperty(property)) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  React.useEffect(() => {\n    fetch(`https://ekreative-json-server.herokuapp.com/664/posts`)\n      .then((response) => response.json())\n      .then((data) => {\n        if (isEmptyObject(dataPost)) {\n             dispatch(setDataOfPost(data.find(obj=> obj.id === idPost)));\n            //  dispatch(setUserData(data.find(obj => obj.id === idPost)));\n        }\n      });\n  });\n\n  const updatePost = async (title, body) => {\n    const data = {\n      title,\n      body,\n      updateAt: datetime,\n    };\n\n    const headers = {\n      Authorization: `Bearer ${localStorage.getItem(\"token\").slice(1, -1)}`,\n    };\n\n    axios\n      .patch(\n        `https://ekreative-json-server.herokuapp.com/664/posts/${dataPost.id}`,\n        data,\n        { headers }\n      )\n      .then((response) => dispatch(setDataOfPost(response.data)));\n\n    setUpdPost((prevState) => ({\n      ...prevState,\n      openEdit: false,\n    }));\n  };\n\n  const deletePost = (id) => {\n    const headers = {\n      Authorization: `Bearer ${localStorage.getItem(\"token\").slice(1, -1)}`,\n    };\n    axios.delete(\n      `https://ekreative-json-server.herokuapp.com/664/posts/${id}`,\n      { headers }\n    );\n    dispatch(setDataDeletePost(id));\n  };\n\n  const openEditPost = (body, title) => {\n    setUpdPost({\n      body,\n      title,\n      openEdit: true,\n    });\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setUpdPost((prevState) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  const handleChangeUserComment = (e) => {\n    e.preventDefault();\n    setNewComment(e.target.value);\n  };\n\n  const addComment = (postId) => {\n    setNewComment(\"\");\n    const data = {\n      postId,\n      body: newComment,\n      createdAt: datetime,\n      updatedAt: \"\",\n      userId: dataAboutUser.id,\n    };\n\n    const headers = {\n      Authorization: `Bearer ${localStorage.getItem(\"token\").slice(1, -1)}`,\n    };\n\n    axios\n      .post(`https://ekreative-json-server.herokuapp.com/664/comments`, data, {\n        headers,\n      })\n      .then((response) => dispatch(setDataCreateComment(response.data)));\n  };\n\n  return (\n    <div className=\"post\" id={`post-${dataPost.id}`}>\n      <Link to=\"/\" className=\"logo\">\n        <h2 className=\"logo\">\n          Tell <span>me</span>\n        </h2>\n      </Link>\n      {updPost.openEdit ? (\n        <div className=\"content-post-edit\">\n          <input\n            className=\"input-title\"\n            value={updPost.title}\n            onChange={handleChange}\n            name=\"title\"\n            type=\"text\"\n          />\n          <textarea\n            className=\"input-body\"\n            value={updPost.body}\n            onChange={handleChange}\n            name=\"body\"\n          />\n          <button\n            className={classNames(\"button-post\", \"button\")}\n            onClick={() => updatePost(updPost.title, updPost.body, dataPost.id)}\n          >\n            Edit\n          </button>\n        </div>\n      ) : (\n        <div className=\"content-post\">\n          <div className=\"\">\n            <div className=\"content\">\n              <h3>{dataPost.title}</h3>\n              <p className=\"post-body\">{dataPost.body}</p>\n            </div>\n            <div className=\"bottom-content\">\n              {/* <p className=\"post-user\"> */}\n                {/* {usersData.firstname} {usersData.lastname} */}\n              {/* </p> */}\n              {/* {localStorage.getItem(\"token\") &&\n              usersData.id === dataAboutUser.id ? (\n                <div className=\"content-button\">\n                  <button\n                    className={classNames(\"button-post\", \"button\")}\n                    onClick={() => openEditPost(dataPost.body, dataPost.title)}\n                  >\n                    Edit\n                  </button>\n                  <Link to=\"/\">\n                    <button\n                      to={\"/\"}\n                      className={classNames(\"button-post\", \"button\")}\n                      onClick={() => deletePost(dataPost.id)}\n                    >\n                      Delete\n                    </button>\n                  </Link>\n                </div>\n              ) : (\n                \"\"\n              )} */}\n            </div>\n          </div>\n          <div className=\"comments-of-post\">\n            <h3>comments</h3>\n            {comments.map((comment) => (\n              <Comment key={comment.id} {...comment} />\n            ))}\n            {localStorage.getItem(\"token\") ? (\n              <div className=\"comment-input-block\">\n                <img src={dataAboutUser.avatar} alt=\"\" />\n                <input\n                  type=\"text\"\n                  value={newComment}\n                  onChange={handleChangeUserComment}\n                />\n                <button\n                  onClick={() => {\n                    addComment(dataPost.id);\n                  }}\n                >\n                  &#43;\n                </button>\n              </div>\n            ) : (\n              \"\"\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Post;\n"]},"metadata":{},"sourceType":"module"}