{"ast":null,"code":"import { ADD_DATA_TO_EDIT, ANNOUN_USER, DATA_COMMENT, DATA_OF_POST, DATA_USER, GET_POSTS_PAGE, POSTS, UPDATE_POST } from \"./action\";\nconst initialState = {\n  posts: []\n};\nexport const postReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_DATA_TO_EDIT:\n      const {\n        id,\n        title,\n        body,\n        userId,\n        createdAt,\n        key\n      } = action;\n      return [{\n        id,\n        title,\n        body,\n        userId,\n        createdAt,\n        key\n      }];\n\n    default:\n      return state;\n  }\n};\nexport const userReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case DATA_USER:\n      const {\n        id,\n        email,\n        firstname,\n        lastname,\n        age,\n        avatar\n      } = action;\n      console.log(email);\n      return [{\n        id,\n        email,\n        firstname,\n        lastname,\n        age,\n        avatar\n      }];\n\n    default:\n      return state;\n  }\n};\nexport const paginateReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_POSTS_PAGE:\n      return { ...state,\n        posts: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\nexport const announUserReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ANNOUN_USER:\n      return state = action.dataUser;\n\n    default:\n      return state;\n  }\n};\nexport const announReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ANNOUN_USER:\n      return state = action.data;\n\n    default:\n      return state;\n  }\n};\nexport const dataPostReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case DATA_OF_POST:\n      return { ...state,\n        id: action.id,\n        title: action.title,\n        body: action.body,\n        userId: action.userId\n      };\n\n    default:\n      return state;\n  }\n};\nexport const posts = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case POSTS:\n      return { ...state,\n        posts: action.payload\n      };\n\n    case UPDATE_POST:\n      return { ...state,\n        posts: state.posts.map(post => {\n          if (post.id === action.payload.id) {\n            return action.payload;\n          }\n\n          return post;\n        })\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/admin/Documents/mystudy/tell-me-react/src/redux/reducer.js"],"names":["ADD_DATA_TO_EDIT","ANNOUN_USER","DATA_COMMENT","DATA_OF_POST","DATA_USER","GET_POSTS_PAGE","POSTS","UPDATE_POST","initialState","posts","postReducer","state","action","type","id","title","body","userId","createdAt","key","userReducer","email","firstname","lastname","age","avatar","console","log","paginateReducer","payload","announUserReducer","dataUser","announReducer","data","dataPostReducer","map","post"],"mappings":"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","sourcesContent":["import {\n  ADD_DATA_TO_EDIT,\n  ANNOUN_USER,\n  DATA_COMMENT,\n  DATA_OF_POST,\n  DATA_USER,\n  GET_POSTS_PAGE,\n  POSTS,\n  UPDATE_POST,\n} from \"./action\";\n\nconst initialState = { posts: [] };\n\nexport const postReducer = (state = [], action) => {\n  switch (action.type) {\n    case ADD_DATA_TO_EDIT:\n      const { id, title, body, userId, createdAt, key } = action;\n      return [\n        {\n          id,\n          title,\n          body,\n          userId,\n          createdAt,\n          key,\n        },\n      ];\n\n    default:\n      return state;\n  }\n};\n\nexport const userReducer = (state = [], action) => {\n  switch (action.type) {\n    case DATA_USER:\n      const { id, email, firstname, lastname, age, avatar } = action;\n      console.log(email);\n      return [\n        {\n          id,\n          email,\n          firstname,\n          lastname,\n          age,\n          avatar,\n        },\n      ];\n    default:\n      return state;\n  }\n};\n\nexport const paginateReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_POSTS_PAGE:\n      return {\n        ...state,\n        posts: action.payload\n      }\n    default:\n      return state;\n  }\n};\n\nexport const announUserReducer = (state = [], action) => {\n  switch (action.type) {\n    case ANNOUN_USER:\n      return (state = action.dataUser);\n    default:\n      return state;\n  }\n};\nexport const announReducer = (state = {}, action) => {\n  switch (action.type) {\n    case ANNOUN_USER:\n      return (state = action.data);\n    default:\n      return state;\n  }\n};\n\nexport const dataPostReducer = (state = {}, action) => {\n  switch (action.type) {\n    case DATA_OF_POST:\n      return {\n        ...state,\n        id: action.id,\n        title: action.title,\n        body: action.body,\n        userId: action.userId,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const posts = (state = initialState, action) => {\n    switch (action.type) {\n        case POSTS:\n      return {\n        ...state,\n        posts: action.payload,\n      };\n\n    case UPDATE_POST:\n      return {\n        ...state,\n        posts: state.posts.map((post) => {\n          if (post.id === action.payload.id) {\n            return action.payload;\n          }\n          return post;\n        }),\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}