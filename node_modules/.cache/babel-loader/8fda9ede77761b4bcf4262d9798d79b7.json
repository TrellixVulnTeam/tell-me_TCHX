{"ast":null,"code":"import firebase from \"firebase/app\";\nimport 'firebase/auth';\nimport 'firebase/firestore';\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDIXJ5YT7hoNbBFqK3TBcV41-TzIO-7n7w\",\n  authDomain: \"fir-auth-6edd8.firebaseapp.com\",\n  projectId: \"fir-auth-6edd8\",\n  storageBucket: \"fir-auth-6edd8.appspot.com\",\n  messagingSenderId: \"904760319835\",\n  appId: \"1:904760319835:web:44fd0d957f114b4e51447e\",\n  measurementId: \"G-Q4TYKH9GG7\"\n};\nconst app = firebase.initializeApp(firebaseConfig);\nconst auth = app.auth();\nconst db = app.firestore();\nconst googleProvider = new firebase.auth.GoogleAuthProvider();\n\nconst signInWithGoogle = async () => {\n  try {\n    const res = await auth.signInWithPopup(googleProvider);\n    const user = res.user;\n    const query = await db.collection(\"users\").where(\"uid\", \"==\", user.uid).get();\n\n    if (query.docs.length === 0) {\n      await db.collection(\"users\").add({\n        uid: user.uid,\n        name: user.displayName,\n        authProvider: \"google\",\n        email: user.email\n      });\n    }\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nconst signInWithEmailAndPassword = async (email, password) => {\n  try {\n    await auth.signInWithEmailAndPassword(email, password);\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nconst registerWithEmailAndPassword = async (name, email, password) => {\n  try {\n    const res = await auth.createUserWithEmailAndPassword(email, password);\n    const user = res.user;\n    await db.collection(\"users\").add({\n      uid: user.uid,\n      name,\n      authProvider: \"local\",\n      email\n    });\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nconst sendPasswordResetEmail = async email => {\n  try {\n    await auth.sendPasswordResetEmail(email);\n    alert(\"Password reset link sent!\");\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\n\nconst logout = () => {\n  auth.signOut();\n};\n\nexport { auth, db, signInWithGoogle, signInWithEmailAndPassword, registerWithEmailAndPassword, sendPasswordResetEmail, logout };","map":{"version":3,"sources":["/Users/admin/Documents/mystudy/react/tell-me-react/src/conponents/Fire.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","initializeApp","auth","db","firestore","googleProvider","GoogleAuthProvider","signInWithGoogle","res","signInWithPopup","user","query","collection","where","uid","get","docs","length","add","name","displayName","authProvider","email","err","console","error","alert","message","signInWithEmailAndPassword","password","registerWithEmailAndPassword","createUserWithEmailAndPassword","sendPasswordResetEmail","logout","signOut"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\nimport 'firebase/auth';\nimport 'firebase/firestore';\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDIXJ5YT7hoNbBFqK3TBcV41-TzIO-7n7w\",\n  authDomain: \"fir-auth-6edd8.firebaseapp.com\",\n  projectId: \"fir-auth-6edd8\",\n  storageBucket: \"fir-auth-6edd8.appspot.com\",\n  messagingSenderId: \"904760319835\",\n  appId: \"1:904760319835:web:44fd0d957f114b4e51447e\",\n  measurementId: \"G-Q4TYKH9GG7\",\n};\nconst app = firebase.initializeApp(firebaseConfig);\nconst auth = app.auth();\nconst db = app.firestore();\nconst googleProvider = new firebase.auth.GoogleAuthProvider();\nconst signInWithGoogle = async () => {\n  try {\n    const res = await auth.signInWithPopup(googleProvider);\n    const user = res.user;\n    const query = await db\n      .collection(\"users\")\n      .where(\"uid\", \"==\", user.uid)\n      .get();\n    if (query.docs.length === 0) {\n      await db.collection(\"users\").add({\n        uid: user.uid,\n        name: user.displayName,\n        authProvider: \"google\",\n        email: user.email,\n      });\n    }\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\nconst signInWithEmailAndPassword = async (email, password) => {\n  try {\n    await auth.signInWithEmailAndPassword(email, password);\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\nconst registerWithEmailAndPassword = async (name, email, password) => {\n  try {\n    const res = await auth.createUserWithEmailAndPassword(email, password);\n    const user = res.user;\n    await db.collection(\"users\").add({\n      uid: user.uid,\n      name,\n      authProvider: \"local\",\n      email,\n    });\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\nconst sendPasswordResetEmail = async (email) => {\n  try {\n    await auth.sendPasswordResetEmail(email);\n    alert(\"Password reset link sent!\");\n  } catch (err) {\n    console.error(err);\n    alert(err.message);\n  }\n};\nconst logout = () => {\n  auth.signOut();\n};\nexport {\n  auth,\n  db,\n  signInWithGoogle,\n  signInWithEmailAndPassword,\n  registerWithEmailAndPassword,\n  sendPasswordResetEmail,\n  logout,\n};"]},"metadata":{},"sourceType":"module"}