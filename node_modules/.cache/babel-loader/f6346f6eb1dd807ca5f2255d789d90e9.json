{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/mystudy/react/tell-me-react/src/pages/Singup.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"./../scss/app.scss\";\nimport { Input } from \"../conponents/index\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction validateEmail(email) {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}\n\nfunction Singup() {\n  _s();\n\n  const [user, setUser] = React.useState({\n    formData: {\n      fistname: {\n        type: \"name\",\n        value: \"\",\n        label: \"first name\",\n        errorMessage: \"first name cannot be empty\",\n        touched: false,\n        valid: false,\n        valid: false,\n        validation: {\n          required: true,\n          firsname: true\n        }\n      },\n      lastname: {\n        type: \"name\",\n        value: \"\",\n        label: \"last name\",\n        errorMessage: \"last name cannot be empty\",\n        valid: false,\n        touched: false,\n        valid: false,\n        validation: {\n          required: true,\n          lastname: true\n        }\n      },\n      email: {\n        type: \"email\",\n        value: \"\",\n        label: \"email\",\n        errorMessage: \"enter correct email\",\n        valid: false,\n        valid: false,\n        touched: false,\n        validation: {\n          required: true,\n          email: true\n        }\n      },\n      password: {\n        type: \"password\",\n        value: \"\",\n        label: \"password\",\n        errorMessage: \"password must have least 9 signs\",\n        valid: false,\n        touched: false,\n        valid: false,\n        validation: {\n          required: true,\n          minLength: 9\n        }\n      },\n      confirmPassword: {\n        type: \"password\",\n        value: \"\",\n        label: \"confirmation password\",\n        errorMessage: \"enter correct password\",\n        valid: false,\n        touched: false,\n        valid: false,\n        validation: {\n          required: true,\n          password: true\n        }\n      },\n      age: {\n        type: \"number\",\n        value: \"\",\n        label: \"age\",\n        errorMessage: \"age cannot be empty\",\n        valid: false,\n        touched: false,\n        valid: false,\n        validation: {\n          required: true,\n          age: true\n        }\n      },\n      avatar: {\n        type: \"url\",\n        value: \"\",\n        label: \"avatar\",\n        errorMessage: \"avatar cannot be empty\",\n        valid: false,\n        touched: false,\n        valid: false,\n        validation: {\n          required: true,\n          avatar: true\n        }\n      }\n    }\n  });\n\n  const registrHendler = async () => {\n    const authData = {\n      email: state.formControls.email.value,\n      password: state.formControls.password.value,\n      returnSecureToken: true\n    };\n    await axios.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyABuCCU2ip1w5leYsAv2F8YTEt0G8B66Sw', authData).catch(e => {\n      console.log(e);\n    });\n  };\n\n  const validateControl = (value, validation) => {\n    if (!validation) {\n      return true;\n    }\n\n    let isValid = true;\n\n    if (validation.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n\n    if (validation.email) {\n      isValid = validateEmail(value) && isValid;\n    }\n\n    if (validation.minLength) {\n      isValid = value.length >= validation.minLength && isValid;\n    }\n\n    return isValid;\n  };\n\n  const onChangeHandler = (event, dataName) => {\n    const formData = { ...user.formData\n    };\n    const data = { ...formData[dataName]\n    };\n    data.value = event.target.value;\n    data.touched = true;\n    data.valid = validateControl(data.value, data.validation);\n    formData[dataName] = data;\n    let isFormValid = true;\n    Object.keys(formData).forEach(name => {\n      isFormValid = formData[name].valid && isFormValid;\n    });\n    setUser(prevState => ({ ...prevState,\n      formData,\n      isFormValid\n    }));\n  };\n\n  const renderInputs = () => {\n    return Object.keys(user.formData).map((dataName, index) => {\n      const data = user.formData[dataName];\n      return /*#__PURE__*/_jsxDEV(Input, {\n        type: data.type,\n        value: data.value,\n        valid: data.valid,\n        touched: data.touched,\n        label: data.label,\n        shouldValidate: !!data.validation,\n        errorMessage: data.errorMessage,\n        onChange: event => onChangeHandler(event, dataName)\n      }, dataName + index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"authorization\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Sing Up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        children: renderInputs()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: registrHendler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Singup, \"qOEIdcmNlTVkIZ1GOmIzS69K3DU=\");\n\n_c = Singup;\nexport default Singup;\n\nvar _c;\n\n$RefreshReg$(_c, \"Singup\");","map":{"version":3,"sources":["/Users/admin/Documents/mystudy/react/tell-me-react/src/pages/Singup.jsx"],"names":["React","Input","axios","validateEmail","email","re","test","String","toLowerCase","Singup","user","setUser","useState","formData","fistname","type","value","label","errorMessage","touched","valid","validation","required","firsname","lastname","password","minLength","confirmPassword","age","avatar","registrHendler","authData","state","formControls","returnSecureToken","post","catch","e","console","log","validateControl","isValid","trim","length","onChangeHandler","event","dataName","data","target","isFormValid","Object","keys","forEach","name","prevState","renderInputs","map","index"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./../scss/app.scss\";\nimport { Input } from \"../conponents/index\";\nimport axios from \"axios\";\n\nfunction validateEmail(email) {\n  const re =\n    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}\n\nfunction Singup() {\n  const [user, setUser] = React.useState({\n    formData: {\n      fistname: {\n        type: \"name\",\n        value: \"\",\n        label: \"first name\",\n        errorMessage: \"first name cannot be empty\",\n        touched: false,\n        valid: false,\n        valid: false,\n        validation: {\n          required: true,\n          firsname: true,\n        },\n      },\n      lastname: {\n        type: \"name\",\n        value: \"\",\n        label: \"last name\",\n        errorMessage: \"last name cannot be empty\",\n        valid: false,\n        touched: false,\n        valid: false,\n        validation: {\n          required: true,\n          lastname: true,\n        },\n      },\n      email: {\n        type: \"email\",\n        value: \"\",\n        label: \"email\",\n        errorMessage: \"enter correct email\",\n        valid: false,\n        valid: false,\n        touched: false,\n        validation: {\n          required: true,\n          email: true,\n        },\n      },\n      password: {\n        type: \"password\",\n        value: \"\",\n        label: \"password\",\n        errorMessage: \"password must have least 9 signs\",\n        valid: false,\n        touched: false,\n        valid: false,\n        validation: {\n          required: true,\n          minLength: 9,\n        },\n      },\n      confirmPassword: {\n        type: \"password\",\n        value: \"\",\n        label: \"confirmation password\",\n        errorMessage: \"enter correct password\",\n        valid: false,\n        touched: false,\n        valid: false,\n        validation: {\n          required: true,\n          password: true,\n        },\n      },\n      age: {\n        type: \"number\",\n        value: \"\",\n        label: \"age\",\n        errorMessage: \"age cannot be empty\",\n        valid: false,\n        touched: false,\n        valid: false,\n        validation: {\n          required: true,\n          age: true,\n        },\n      },\n      avatar: {\n        type: \"url\",\n        value: \"\",\n        label: \"avatar\",\n        errorMessage: \"avatar cannot be empty\",\n        valid: false,\n        touched: false,\n        valid: false,\n        validation: {\n          required: true,\n          avatar: true,\n        },\n      },\n    },\n  });\n\n  const registrHendler = async () => {\n\n    const authData = {\n      email: state.formControls.email.value,\n      password: state.formControls.password.value,\n      returnSecureToken: true\n    }\n\n    await axios.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyABuCCU2ip1w5leYsAv2F8YTEt0G8B66Sw', authData)\n      .catch((e) => {\n        console.log(e);\n      })\n  };\n\n  const validateControl = (value, validation) => {\n    if (!validation) {\n      return true;\n    }\n    let isValid = true;\n\n    if (validation.required) {\n      isValid = value.trim() !== \"\" && isValid;\n    }\n    if (validation.email) {\n      isValid = validateEmail(value) && isValid;\n    }\n    if (validation.minLength) {\n      isValid = value.length >= validation.minLength && isValid;\n    }\n    return isValid;\n  };\n\n\n  const onChangeHandler = (event, dataName) => {\n    const formData = { ...user.formData };\n    const data = { ...formData[dataName] };\n\n    data.value = event.target.value;\n    data.touched = true;\n    data.valid = validateControl(data.value, data.validation);\n\n    formData[dataName] = data;\n\n    let isFormValid = true;\n\n    Object.keys(formData).forEach((name) => {\n      isFormValid = formData[name].valid && isFormValid;\n    });\n\n    setUser((prevState) => ({\n      ...prevState,\n      formData,\n      isFormValid,\n    }));\n  };\n\n  const renderInputs = () => {\n    return Object.keys(user.formData).map((dataName, index) => {\n      const data = user.formData[dataName];\n      return (\n        <Input\n          key={dataName + index}\n          type={data.type}\n          value={data.value}\n          valid={data.valid}\n          touched={data.touched}\n          label={data.label}\n          shouldValidate={!!data.validation}\n          errorMessage={data.errorMessage}\n          onChange={(event) => onChangeHandler(event, dataName)}\n        />\n      );\n    });\n  };\n\n  return (\n    <div className=\"authorization\">\n        <h2>Sing Up</h2>\n      <div className=\"form\">\n        <form>{renderInputs()}</form>\n      </div>\n      <Button onClick={registrHendler}/>\n    </div>\n  );\n}\n\nexport default Singup;\n"]},"metadata":{},"sourceType":"module"}