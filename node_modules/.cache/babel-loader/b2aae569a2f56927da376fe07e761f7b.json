{"ast":null,"code":"'use strict';\n\nconst maybeJoin = function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return args.every(arg => arg) ? args.join('') : '';\n};\n\nconst maybeEncode = arg => arg ? encodeURIComponent(arg) : '';\n\nconst defaults = {\n  sshtemplate: _ref => {\n    let {\n      domain,\n      user,\n      project,\n      committish\n    } = _ref;\n    return `git@${domain}:${user}/${project}.git${maybeJoin('#', committish)}`;\n  },\n  sshurltemplate: _ref2 => {\n    let {\n      domain,\n      user,\n      project,\n      committish\n    } = _ref2;\n    return `git+ssh://git@${domain}/${user}/${project}.git${maybeJoin('#', committish)}`;\n  },\n  browsetemplate: _ref3 => {\n    let {\n      domain,\n      user,\n      project,\n      committish,\n      treepath\n    } = _ref3;\n    return `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}`;\n  },\n  browsefiletemplate: _ref4 => {\n    let {\n      domain,\n      user,\n      project,\n      committish,\n      treepath,\n      path,\n      fragment,\n      hashformat\n    } = _ref4;\n    return `https://${domain}/${user}/${project}/${treepath}/${maybeEncode(committish || 'master')}/${path}${maybeJoin('#', hashformat(fragment || ''))}`;\n  },\n  docstemplate: _ref5 => {\n    let {\n      domain,\n      user,\n      project,\n      treepath,\n      committish\n    } = _ref5;\n    return `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}#readme`;\n  },\n  httpstemplate: _ref6 => {\n    let {\n      auth,\n      domain,\n      user,\n      project,\n      committish\n    } = _ref6;\n    return `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`;\n  },\n  filetemplate: _ref7 => {\n    let {\n      domain,\n      user,\n      project,\n      committish,\n      path\n    } = _ref7;\n    return `https://${domain}/${user}/${project}/raw/${maybeEncode(committish) || 'master'}/${path}`;\n  },\n  shortcuttemplate: _ref8 => {\n    let {\n      type,\n      user,\n      project,\n      committish\n    } = _ref8;\n    return `${type}:${user}/${project}${maybeJoin('#', committish)}`;\n  },\n  pathtemplate: _ref9 => {\n    let {\n      user,\n      project,\n      committish\n    } = _ref9;\n    return `${user}/${project}${maybeJoin('#', committish)}`;\n  },\n  bugstemplate: _ref10 => {\n    let {\n      domain,\n      user,\n      project\n    } = _ref10;\n    return `https://${domain}/${user}/${project}/issues`;\n  },\n  hashformat: formatHashFragment\n};\nconst gitHosts = {};\ngitHosts.github = Object.assign({}, defaults, {\n  // First two are insecure and generally shouldn't be used any more, but\n  // they are still supported.\n  protocols: ['git:', 'http:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'github.com',\n  treepath: 'tree',\n  filetemplate: _ref11 => {\n    let {\n      auth,\n      user,\n      project,\n      committish,\n      path\n    } = _ref11;\n    return `https://${maybeJoin(auth, '@')}raw.githubusercontent.com/${user}/${project}/${maybeEncode(committish) || 'master'}/${path}`;\n  },\n  gittemplate: _ref12 => {\n    let {\n      auth,\n      domain,\n      user,\n      project,\n      committish\n    } = _ref12;\n    return `git://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`;\n  },\n  tarballtemplate: _ref13 => {\n    let {\n      domain,\n      user,\n      project,\n      committish\n    } = _ref13;\n    return `https://codeload.${domain}/${user}/${project}/tar.gz/${maybeEncode(committish) || 'master'}`;\n  },\n  extract: url => {\n    let [, user, project, type, committish] = url.pathname.split('/', 5);\n\n    if (type && type !== 'tree') {\n      return;\n    }\n\n    if (!type) {\n      committish = url.hash.slice(1);\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n\n    if (!user || !project) {\n      return;\n    }\n\n    return {\n      user,\n      project,\n      committish\n    };\n  }\n});\ngitHosts.bitbucket = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'bitbucket.org',\n  treepath: 'src',\n  tarballtemplate: _ref14 => {\n    let {\n      domain,\n      user,\n      project,\n      committish\n    } = _ref14;\n    return `https://${domain}/${user}/${project}/get/${maybeEncode(committish) || 'master'}.tar.gz`;\n  },\n  extract: url => {\n    let [, user, project, aux] = url.pathname.split('/', 4);\n\n    if (['get'].includes(aux)) {\n      return;\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n\n    if (!user || !project) {\n      return;\n    }\n\n    return {\n      user,\n      project,\n      committish: url.hash.slice(1)\n    };\n  }\n});\ngitHosts.gitlab = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gitlab.com',\n  treepath: 'tree',\n  httpstemplate: _ref15 => {\n    let {\n      auth,\n      domain,\n      user,\n      project,\n      committish\n    } = _ref15;\n    return `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`;\n  },\n  tarballtemplate: _ref16 => {\n    let {\n      domain,\n      user,\n      project,\n      committish\n    } = _ref16;\n    return `https://${domain}/${user}/${project}/repository/archive.tar.gz?ref=${maybeEncode(committish) || 'master'}`;\n  },\n  extract: url => {\n    const path = url.pathname.slice(1);\n\n    if (path.includes('/-/') || path.includes('/archive.tar.gz')) {\n      return;\n    }\n\n    const segments = path.split('/');\n    let project = segments.pop();\n\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n\n    const user = segments.join('/');\n\n    if (!user || !project) {\n      return;\n    }\n\n    return {\n      user,\n      project,\n      committish: url.hash.slice(1)\n    };\n  }\n});\ngitHosts.gist = Object.assign({}, defaults, {\n  protocols: ['git:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gist.github.com',\n  sshtemplate: _ref17 => {\n    let {\n      domain,\n      project,\n      committish\n    } = _ref17;\n    return `git@${domain}:${project}.git${maybeJoin('#', committish)}`;\n  },\n  sshurltemplate: _ref18 => {\n    let {\n      domain,\n      project,\n      committish\n    } = _ref18;\n    return `git+ssh://git@${domain}/${project}.git${maybeJoin('#', committish)}`;\n  },\n  browsetemplate: _ref19 => {\n    let {\n      domain,\n      project,\n      committish\n    } = _ref19;\n    return `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`;\n  },\n  browsefiletemplate: _ref20 => {\n    let {\n      domain,\n      project,\n      committish,\n      path,\n      hashformat\n    } = _ref20;\n    return `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}${maybeJoin('#', hashformat(path))}`;\n  },\n  docstemplate: _ref21 => {\n    let {\n      domain,\n      project,\n      committish\n    } = _ref21;\n    return `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`;\n  },\n  httpstemplate: _ref22 => {\n    let {\n      domain,\n      project,\n      committish\n    } = _ref22;\n    return `git+https://${domain}/${project}.git${maybeJoin('#', committish)}`;\n  },\n  filetemplate: _ref23 => {\n    let {\n      user,\n      project,\n      committish,\n      path\n    } = _ref23;\n    return `https://gist.githubusercontent.com/${user}/${project}/raw${maybeJoin('/', maybeEncode(committish))}/${path}`;\n  },\n  shortcuttemplate: _ref24 => {\n    let {\n      type,\n      project,\n      committish\n    } = _ref24;\n    return `${type}:${project}${maybeJoin('#', committish)}`;\n  },\n  pathtemplate: _ref25 => {\n    let {\n      project,\n      committish\n    } = _ref25;\n    return `${project}${maybeJoin('#', committish)}`;\n  },\n  bugstemplate: _ref26 => {\n    let {\n      domain,\n      project\n    } = _ref26;\n    return `https://${domain}/${project}`;\n  },\n  gittemplate: _ref27 => {\n    let {\n      domain,\n      project,\n      committish\n    } = _ref27;\n    return `git://${domain}/${project}.git${maybeJoin('#', committish)}`;\n  },\n  tarballtemplate: _ref28 => {\n    let {\n      project,\n      committish\n    } = _ref28;\n    return `https://codeload.github.com/gist/${project}/tar.gz/${maybeEncode(committish) || 'master'}`;\n  },\n  extract: url => {\n    let [, user, project, aux] = url.pathname.split('/', 4);\n\n    if (aux === 'raw') {\n      return;\n    }\n\n    if (!project) {\n      if (!user) {\n        return;\n      }\n\n      project = user;\n      user = null;\n    }\n\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n\n    return {\n      user,\n      project,\n      committish: url.hash.slice(1)\n    };\n  },\n  hashformat: function (fragment) {\n    return fragment && 'file-' + formatHashFragment(fragment);\n  }\n});\ngitHosts.sourcehut = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'https:'],\n  domain: 'git.sr.ht',\n  treepath: 'tree',\n  browsefiletemplate: _ref29 => {\n    let {\n      domain,\n      user,\n      project,\n      committish,\n      treepath,\n      path,\n      fragment,\n      hashformat\n    } = _ref29;\n    return `https://${domain}/${user}/${project}/${treepath}/${maybeEncode(committish || 'main')}/${path}${maybeJoin('#', hashformat(fragment || ''))}`;\n  },\n  filetemplate: _ref30 => {\n    let {\n      domain,\n      user,\n      project,\n      committish,\n      path\n    } = _ref30;\n    return `https://${domain}/${user}/${project}/blob/${maybeEncode(committish) || 'main'}/${path}`;\n  },\n  httpstemplate: _ref31 => {\n    let {\n      domain,\n      user,\n      project,\n      committish\n    } = _ref31;\n    return `https://${domain}/${user}/${project}.git${maybeJoin('#', committish)}`;\n  },\n  tarballtemplate: _ref32 => {\n    let {\n      domain,\n      user,\n      project,\n      committish\n    } = _ref32;\n    return `https://${domain}/${user}/${project}/archive/${maybeEncode(committish) || 'main'}.tar.gz`;\n  },\n  bugstemplate: _ref33 => {\n    let {\n      domain,\n      user,\n      project\n    } = _ref33;\n    return `https://todo.sr.ht/${user}/${project}`;\n  },\n  docstemplate: _ref34 => {\n    let {\n      domain,\n      user,\n      project,\n      treepath,\n      committish\n    } = _ref34;\n    return `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}#readme`;\n  },\n  extract: url => {\n    let [, user, project, aux] = url.pathname.split('/', 4); // tarball url\n\n    if (['archive'].includes(aux)) {\n      return;\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4);\n    }\n\n    if (!user || !project) {\n      return;\n    }\n\n    return {\n      user,\n      project,\n      committish: url.hash.slice(1)\n    };\n  }\n});\nconst names = Object.keys(gitHosts);\ngitHosts.byShortcut = {};\ngitHosts.byDomain = {};\n\nfor (const name of names) {\n  gitHosts.byShortcut[`${name}:`] = name;\n  gitHosts.byDomain[gitHosts[name].domain] = name;\n}\n\nfunction formatHashFragment(fragment) {\n  return fragment.toLowerCase().replace(/^\\W+|\\/|\\W+$/g, '').replace(/\\W+/g, '-');\n}\n\nmodule.exports = gitHosts;","map":{"version":3,"sources":["/Users/admin/Documents/mystudy/react/tell-me-react/tell-me-react/node_modules/npm/node_modules/hosted-git-info/git-host-info.js"],"names":["maybeJoin","args","every","arg","join","maybeEncode","encodeURIComponent","defaults","sshtemplate","domain","user","project","committish","sshurltemplate","browsetemplate","treepath","browsefiletemplate","path","fragment","hashformat","docstemplate","httpstemplate","auth","filetemplate","shortcuttemplate","type","pathtemplate","bugstemplate","formatHashFragment","gitHosts","github","Object","assign","protocols","gittemplate","tarballtemplate","extract","url","pathname","split","hash","slice","endsWith","bitbucket","aux","includes","gitlab","segments","pop","gist","sourcehut","names","keys","byShortcut","byDomain","name","toLowerCase","replace","module","exports"],"mappings":"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","sourcesContent":["'use strict'\nconst maybeJoin = (...args) => args.every(arg => arg) ? args.join('') : ''\nconst maybeEncode = (arg) => arg ? encodeURIComponent(arg) : ''\n\nconst defaults = {\n  sshtemplate: ({ domain, user, project, committish }) => `git@${domain}:${user}/${project}.git${maybeJoin('#', committish)}`,\n  sshurltemplate: ({ domain, user, project, committish }) => `git+ssh://git@${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  browsetemplate: ({ domain, user, project, committish, treepath }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}`,\n  browsefiletemplate: ({ domain, user, project, committish, treepath, path, fragment, hashformat }) => `https://${domain}/${user}/${project}/${treepath}/${maybeEncode(committish || 'master')}/${path}${maybeJoin('#', hashformat(fragment || ''))}`,\n  docstemplate: ({ domain, user, project, treepath, committish }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}#readme`,\n  httpstemplate: ({ auth, domain, user, project, committish }) => `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  filetemplate: ({ domain, user, project, committish, path }) => `https://${domain}/${user}/${project}/raw/${maybeEncode(committish) || 'master'}/${path}`,\n  shortcuttemplate: ({ type, user, project, committish }) => `${type}:${user}/${project}${maybeJoin('#', committish)}`,\n  pathtemplate: ({ user, project, committish }) => `${user}/${project}${maybeJoin('#', committish)}`,\n  bugstemplate: ({ domain, user, project }) => `https://${domain}/${user}/${project}/issues`,\n  hashformat: formatHashFragment\n}\n\nconst gitHosts = {}\ngitHosts.github = Object.assign({}, defaults, {\n  // First two are insecure and generally shouldn't be used any more, but\n  // they are still supported.\n  protocols: ['git:', 'http:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'github.com',\n  treepath: 'tree',\n  filetemplate: ({ auth, user, project, committish, path }) => `https://${maybeJoin(auth, '@')}raw.githubusercontent.com/${user}/${project}/${maybeEncode(committish) || 'master'}/${path}`,\n  gittemplate: ({ auth, domain, user, project, committish }) => `git://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ domain, user, project, committish }) => `https://codeload.${domain}/${user}/${project}/tar.gz/${maybeEncode(committish) || 'master'}`,\n  extract: (url) => {\n    let [, user, project, type, committish] = url.pathname.split('/', 5)\n    if (type && type !== 'tree') {\n      return\n    }\n\n    if (!type) {\n      committish = url.hash.slice(1)\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish }\n  }\n})\n\ngitHosts.bitbucket = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'bitbucket.org',\n  treepath: 'src',\n  tarballtemplate: ({ domain, user, project, committish }) => `https://${domain}/${user}/${project}/get/${maybeEncode(committish) || 'master'}.tar.gz`,\n  extract: (url) => {\n    let [, user, project, aux] = url.pathname.split('/', 4)\n    if (['get'].includes(aux)) {\n      return\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  }\n})\n\ngitHosts.gitlab = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gitlab.com',\n  treepath: 'tree',\n  httpstemplate: ({ auth, domain, user, project, committish }) => `git+https://${maybeJoin(auth, '@')}${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ domain, user, project, committish }) => `https://${domain}/${user}/${project}/repository/archive.tar.gz?ref=${maybeEncode(committish) || 'master'}`,\n  extract: (url) => {\n    const path = url.pathname.slice(1)\n    if (path.includes('/-/') || path.includes('/archive.tar.gz')) {\n      return\n    }\n\n    const segments = path.split('/')\n    let project = segments.pop()\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    const user = segments.join('/')\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  }\n})\n\ngitHosts.gist = Object.assign({}, defaults, {\n  protocols: ['git:', 'git+ssh:', 'git+https:', 'ssh:', 'https:'],\n  domain: 'gist.github.com',\n  sshtemplate: ({ domain, project, committish }) => `git@${domain}:${project}.git${maybeJoin('#', committish)}`,\n  sshurltemplate: ({ domain, project, committish }) => `git+ssh://git@${domain}/${project}.git${maybeJoin('#', committish)}`,\n  browsetemplate: ({ domain, project, committish }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`,\n  browsefiletemplate: ({ domain, project, committish, path, hashformat }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}${maybeJoin('#', hashformat(path))}`,\n  docstemplate: ({ domain, project, committish }) => `https://${domain}/${project}${maybeJoin('/', maybeEncode(committish))}`,\n  httpstemplate: ({ domain, project, committish }) => `git+https://${domain}/${project}.git${maybeJoin('#', committish)}`,\n  filetemplate: ({ user, project, committish, path }) => `https://gist.githubusercontent.com/${user}/${project}/raw${maybeJoin('/', maybeEncode(committish))}/${path}`,\n  shortcuttemplate: ({ type, project, committish }) => `${type}:${project}${maybeJoin('#', committish)}`,\n  pathtemplate: ({ project, committish }) => `${project}${maybeJoin('#', committish)}`,\n  bugstemplate: ({ domain, project }) => `https://${domain}/${project}`,\n  gittemplate: ({ domain, project, committish }) => `git://${domain}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ project, committish }) => `https://codeload.github.com/gist/${project}/tar.gz/${maybeEncode(committish) || 'master'}`,\n  extract: (url) => {\n    let [, user, project, aux] = url.pathname.split('/', 4)\n    if (aux === 'raw') {\n      return\n    }\n\n    if (!project) {\n      if (!user) {\n        return\n      }\n\n      project = user\n      user = null\n    }\n\n    if (project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  },\n  hashformat: function (fragment) {\n    return fragment && 'file-' + formatHashFragment(fragment)\n  }\n})\n\ngitHosts.sourcehut = Object.assign({}, defaults, {\n  protocols: ['git+ssh:', 'https:'],\n  domain: 'git.sr.ht',\n  treepath: 'tree',\n  browsefiletemplate: ({ domain, user, project, committish, treepath, path, fragment, hashformat }) => `https://${domain}/${user}/${project}/${treepath}/${maybeEncode(committish || 'main')}/${path}${maybeJoin('#', hashformat(fragment || ''))}`,\n  filetemplate: ({ domain, user, project, committish, path }) => `https://${domain}/${user}/${project}/blob/${maybeEncode(committish) || 'main'}/${path}`,\n  httpstemplate: ({ domain, user, project, committish }) => `https://${domain}/${user}/${project}.git${maybeJoin('#', committish)}`,\n  tarballtemplate: ({ domain, user, project, committish }) => `https://${domain}/${user}/${project}/archive/${maybeEncode(committish) || 'main'}.tar.gz`,\n  bugstemplate: ({ domain, user, project }) => `https://todo.sr.ht/${user}/${project}`,\n  docstemplate: ({ domain, user, project, treepath, committish }) => `https://${domain}/${user}/${project}${maybeJoin('/', treepath, '/', maybeEncode(committish))}#readme`,\n  extract: (url) => {\n    let [, user, project, aux] = url.pathname.split('/', 4)\n\n    // tarball url\n    if (['archive'].includes(aux)) {\n      return\n    }\n\n    if (project && project.endsWith('.git')) {\n      project = project.slice(0, -4)\n    }\n\n    if (!user || !project) {\n      return\n    }\n\n    return { user, project, committish: url.hash.slice(1) }\n  }\n})\n\nconst names = Object.keys(gitHosts)\ngitHosts.byShortcut = {}\ngitHosts.byDomain = {}\nfor (const name of names) {\n  gitHosts.byShortcut[`${name}:`] = name\n  gitHosts.byDomain[gitHosts[name].domain] = name\n}\n\nfunction formatHashFragment (fragment) {\n  return fragment.toLowerCase().replace(/^\\W+|\\/|\\W+$/g, '').replace(/\\W+/g, '-')\n}\n\nmodule.exports = gitHosts\n"]},"metadata":{},"sourceType":"script"}