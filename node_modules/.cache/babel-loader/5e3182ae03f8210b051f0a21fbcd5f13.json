{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/mystudy/react/tell-me-react/src/pages/Singup.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"./../scss/app.scss\";\nimport { Input } from \"../conponents/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Singup() {\n  _s();\n\n  const [user, setUser] = React.useState({\n    formData: {\n      fistname: {\n        type: \"name\",\n        value: \"\",\n        label: \"first name\",\n        errorMessage: \"firstname cannot be empty\",\n        touched: false,\n        valid: false\n      },\n      lastname: {\n        type: \"name\",\n        value: \"\",\n        label: \"last name\",\n        errorMessage: \"lastname cannot be empty\",\n        valid: false,\n        touched: false\n      },\n      email: {\n        type: \"email\",\n        value: \"\",\n        label: \"email\",\n        errorMessage: \"put correct email\",\n        valid: false,\n        touched: false\n      },\n      password: {\n        type: \"password\",\n        value: \"\",\n        label: \"password\",\n        errorMessage: \"password must have least 9 signs\",\n        valid: false,\n        touched: false\n      },\n      confirmPassword: {\n        type: \"password\",\n        value: \"\",\n        label: \"confirmation password\",\n        errorMessage: \"put correct password\",\n        valid: false,\n        touched: false\n      },\n      age: {\n        type: \"number\",\n        value: \"\",\n        label: \"age\",\n        errorMessage: \"age cannot be empty\",\n        valid: false,\n        touched: false\n      },\n      avatar: {\n        type: \"url\",\n        value: \"\",\n        label: \"avatar\",\n        errorMessage: \"avatar cannot be empty\",\n        valid: false,\n        touched: false\n      }\n    }\n  });\n\n  const onChangeHandler = (event, dataName) => {\n    const formData = { ...user.formData\n    };\n    const data = { ...formData[dataName]\n    };\n    data.value = event.target.value;\n    data.touched = true; // data.valid = validateControl(control.value, control.validation);\n\n    formData[dataName] = data;\n    let isFormValid = true;\n    Object.keys(formData).forEach(name => {\n      isFormValid = formData[name].valid && isFormValid;\n    });\n    setUser(prevState => ({ ...prevState,\n      formData,\n      isFormValid\n    }));\n  };\n\n  const renderInputs = () => {\n    return Object.keys(user.formData).map((dataName, index) => {\n      const data = user.formData[dataName];\n      return /*#__PURE__*/_jsxDEV(Input, {\n        type: data.type,\n        value: data.value,\n        valid: data.valid,\n        touched: data.touched,\n        label: data.label,\n        shouldValidate: !!data.validation,\n        errorMessage: data.errorMessage,\n        onChange: event => onChangeHandler(event, dataName)\n      }, dataName + index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"singup\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Sing Up\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        children: renderInputs()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Singup, \"+qphES5cs0hUgIHGl6JjvxpOqzk=\");\n\n_c = Singup;\nexport default Singup;\n\nvar _c;\n\n$RefreshReg$(_c, \"Singup\");","map":{"version":3,"sources":["/Users/admin/Documents/mystudy/react/tell-me-react/src/pages/Singup.jsx"],"names":["React","Input","Singup","user","setUser","useState","formData","fistname","type","value","label","errorMessage","touched","valid","lastname","email","password","confirmPassword","age","avatar","onChangeHandler","event","dataName","data","target","isFormValid","Object","keys","forEach","name","prevState","renderInputs","map","index","validation"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./../scss/app.scss\";\nimport { Input } from \"../conponents/index\";\n\nfunction Singup() {\n  const [user, setUser] = React.useState({\n    formData: {\n      fistname: {\n        type: \"name\",\n        value: \"\",\n        label: \"first name\",\n        errorMessage: \"firstname cannot be empty\",\n        touched: false,\n        valid: false,\n      },\n      lastname: {\n        type: \"name\",\n        value: \"\",\n        label: \"last name\",\n        errorMessage: \"lastname cannot be empty\",\n        valid: false,\n        touched: false,\n      },\n      email: {\n        type: \"email\",\n        value: \"\",\n        label: \"email\",\n        errorMessage: \"put correct email\",\n        valid: false,\n        touched: false,\n      },\n      password: {\n        type: \"password\",\n        value: \"\",\n        label: \"password\",\n        errorMessage: \"password must have least 9 signs\",\n        valid: false,\n        touched: false,\n      },\n      confirmPassword: {\n        type: \"password\",\n        value: \"\",\n        label: \"confirmation password\",\n        errorMessage: \"put correct password\",\n        valid: false,\n        touched: false,\n      },\n      age: {\n        type: \"number\",\n        value: \"\",\n        label: \"age\",\n        errorMessage: \"age cannot be empty\",\n        valid: false,\n        touched: false,\n      },\n      avatar: {\n        type: \"url\",\n        value: \"\",\n        label: \"avatar\",\n        errorMessage: \"avatar cannot be empty\",\n        valid: false,\n        touched: false,\n      },\n    },\n  });\n\n  const onChangeHandler = (event, dataName) => {\n    const formData = { ...user.formData };\n    const data = { ...formData[dataName] };\n\n    data.value = event.target.value;\n    data.touched = true;\n    // data.valid = validateControl(control.value, control.validation);\n\n    formData[dataName] = data;\n\n    let isFormValid = true;\n\n    Object.keys(formData).forEach((name) => {\n      isFormValid = formData[name].valid && isFormValid;\n    });\n\n    setUser((prevState) => ({\n      ...prevState,\n      formData,\n      isFormValid,\n    }));\n  };\n\n  const renderInputs = () => {\n    return Object.keys(user.formData).map((dataName, index) => {\n      const data = user.formData[dataName];\n      return (\n        <Input\n          key={dataName + index}\n          type={data.type}\n          value={data.value}\n          valid={data.valid}\n          touched={data.touched}\n          label={data.label}\n          shouldValidate={!!data.validation}\n          errorMessage={data.errorMessage}\n          onChange={(event) => onChangeHandler(event, dataName)}\n        />\n      );\n    });\n  };\n\n  return (\n    <div className=\"singup\">\n        <h2>Sing Up</h2>\n      <div className=\"form\">\n        <form>{renderInputs()}</form>\n      </div>\n    </div>\n  );\n}\n\nexport default Singup;\n"]},"metadata":{},"sourceType":"module"}