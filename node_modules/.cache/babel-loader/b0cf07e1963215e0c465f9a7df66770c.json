{"ast":null,"code":"/*\n  const obj1 = {a: 3, b: 5};\n  diffApply(obj1,\n    [\n      { \"op\": \"remove\", \"path\": ['b'] },\n      { \"op\": \"replace\", \"path\": ['a'], \"value\": 4 },\n      { \"op\": \"add\", \"path\": ['c'], \"value\": 5 }\n    ]\n  );\n  obj1; // {a: 4, c: 5}\n\n  // using converter to apply jsPatch standard paths\n  // see http://jsonpatch.com\n  import {diff, jsonPatchPathConverter} from 'just-diff'\n  const obj2 = {a: 3, b: 5};\n  diffApply(obj2, [\n    { \"op\": \"remove\", \"path\": '/b' },\n    { \"op\": \"replace\", \"path\": '/a', \"value\": 4 }\n    { \"op\": \"add\", \"path\": '/c', \"value\": 5 }\n  ], jsonPatchPathConverter);\n  obj2; // {a: 4, c: 5}\n\n  // arrays\n  const obj3 = {a: 4, b: [1, 2, 3]};\n  diffApply(obj3, [\n    { \"op\": \"replace\", \"path\": ['a'], \"value\": 3 }\n    { \"op\": \"replace\", \"path\": ['b', 2], \"value\": 4 }\n    { \"op\": \"add\", \"path\": ['b', 3], \"value\": 9 }\n  ]);\n  obj3; // {a: 3, b: [1, 2, 4, 9]}\n\n  // nested paths\n  const obj4 = {a: 4, b: {c: 3}};\n  diffApply(obj4, [\n    { \"op\": \"replace\", \"path\": ['a'], \"value\": 5 }\n    { \"op\": \"remove\", \"path\": ['b', 'c']}\n    { \"op\": \"add\", \"path\": ['b', 'd'], \"value\": 4 }\n  ]);\n  obj4; // {a: 5, b: {d: 4}}\n*/\nvar REMOVE = 'remove';\nvar REPLACE = 'replace';\nvar ADD = 'add';\n\nfunction diffApply(obj, diff, pathConverter) {\n  if (!obj || typeof obj != 'object') {\n    throw new Error('base object must be an object or an array');\n  }\n\n  if (!Array.isArray(diff)) {\n    throw new Error('diff must be an array');\n  }\n\n  var diffLength = diff.length;\n\n  for (var i = 0; i < diffLength; i++) {\n    var thisDiff = diff[i];\n    var subObject = obj;\n    var thisOp = thisDiff.op;\n    var thisPath = thisDiff.path;\n\n    if (pathConverter) {\n      thisPath = pathConverter(thisPath);\n\n      if (!Array.isArray(thisPath)) {\n        throw new Error('pathConverter must return an array');\n      }\n    } else {\n      if (!Array.isArray(thisPath)) {\n        throw new Error('diff path must be an array, consider supplying a path converter');\n      }\n    }\n\n    var pathCopy = thisPath.slice();\n    var lastProp = pathCopy.pop();\n\n    if (lastProp == null) {\n      return false;\n    }\n\n    var thisProp;\n\n    while ((thisProp = pathCopy.shift()) != null) {\n      if (!(thisProp in subObject)) {\n        subObject[thisProp] = {};\n      }\n\n      subObject = subObject[thisProp];\n    }\n\n    if (thisOp === REMOVE || thisOp === REPLACE) {\n      if (!subObject.hasOwnProperty(lastProp)) {\n        throw new Error(['expected to find property', thisDiff.path, 'in object', obj].join(' '));\n      }\n    }\n\n    if (thisOp === REMOVE) {\n      Array.isArray(subObject) ? subObject.splice(lastProp, 1) : delete subObject[lastProp];\n    }\n\n    if (thisOp === REPLACE || thisOp === ADD) {\n      subObject[lastProp] = thisDiff.value;\n    }\n  }\n\n  return subObject;\n}\n\nfunction jsonPatchPathConverter(stringPath) {\n  return stringPath.split('/').slice(1);\n}\n\nexport { diffApply, jsonPatchPathConverter };","map":{"version":3,"sources":["/Users/admin/Documents/mystudy/react/tell-me-react/tell-me-react/node_modules/npm/node_modules/just-diff-apply/index.mjs"],"names":["REMOVE","REPLACE","ADD","diffApply","obj","diff","pathConverter","Error","Array","isArray","diffLength","length","i","thisDiff","subObject","thisOp","op","thisPath","path","pathCopy","slice","lastProp","pop","thisProp","shift","hasOwnProperty","join","splice","value","jsonPatchPathConverter","stringPath","split"],"mappings":"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","sourcesContent":["/*\n  const obj1 = {a: 3, b: 5};\n  diffApply(obj1,\n    [\n      { \"op\": \"remove\", \"path\": ['b'] },\n      { \"op\": \"replace\", \"path\": ['a'], \"value\": 4 },\n      { \"op\": \"add\", \"path\": ['c'], \"value\": 5 }\n    ]\n  );\n  obj1; // {a: 4, c: 5}\n\n  // using converter to apply jsPatch standard paths\n  // see http://jsonpatch.com\n  import {diff, jsonPatchPathConverter} from 'just-diff'\n  const obj2 = {a: 3, b: 5};\n  diffApply(obj2, [\n    { \"op\": \"remove\", \"path\": '/b' },\n    { \"op\": \"replace\", \"path\": '/a', \"value\": 4 }\n    { \"op\": \"add\", \"path\": '/c', \"value\": 5 }\n  ], jsonPatchPathConverter);\n  obj2; // {a: 4, c: 5}\n\n  // arrays\n  const obj3 = {a: 4, b: [1, 2, 3]};\n  diffApply(obj3, [\n    { \"op\": \"replace\", \"path\": ['a'], \"value\": 3 }\n    { \"op\": \"replace\", \"path\": ['b', 2], \"value\": 4 }\n    { \"op\": \"add\", \"path\": ['b', 3], \"value\": 9 }\n  ]);\n  obj3; // {a: 3, b: [1, 2, 4, 9]}\n\n  // nested paths\n  const obj4 = {a: 4, b: {c: 3}};\n  diffApply(obj4, [\n    { \"op\": \"replace\", \"path\": ['a'], \"value\": 5 }\n    { \"op\": \"remove\", \"path\": ['b', 'c']}\n    { \"op\": \"add\", \"path\": ['b', 'd'], \"value\": 4 }\n  ]);\n  obj4; // {a: 5, b: {d: 4}}\n*/\n\nvar REMOVE = 'remove';\nvar REPLACE = 'replace';\nvar ADD = 'add';\n\nfunction diffApply(obj, diff, pathConverter) {\n  if (!obj || typeof obj != 'object') {\n    throw new Error('base object must be an object or an array');\n  }\n\n  if (!Array.isArray(diff)) {\n    throw new Error('diff must be an array');\n  }\n\n  var diffLength = diff.length;\n  for (var i = 0; i < diffLength; i++) {\n    var thisDiff = diff[i];\n    var subObject = obj;\n    var thisOp = thisDiff.op;\n    var thisPath = thisDiff.path;\n    if (pathConverter) {\n      thisPath = pathConverter(thisPath);\n      if (!Array.isArray(thisPath)) {\n        throw new Error('pathConverter must return an array');\n      }\n    } else {\n      if (!Array.isArray(thisPath)) {\n        throw new Error(\n          'diff path must be an array, consider supplying a path converter'\n        );\n      }\n    }\n    var pathCopy = thisPath.slice();\n    var lastProp = pathCopy.pop();\n    if (lastProp == null) {\n      return false;\n    }\n    var thisProp;\n    while ((thisProp = pathCopy.shift()) != null) {\n      if (!(thisProp in subObject)) {\n        subObject[thisProp] = {};\n      }\n      subObject = subObject[thisProp];\n    }\n    if (thisOp === REMOVE || thisOp === REPLACE) {\n      if (!subObject.hasOwnProperty(lastProp)) {\n        throw new Error(\n          ['expected to find property', thisDiff.path, 'in object', obj].join(\n            ' '\n          )\n        );\n      }\n    }\n    if (thisOp === REMOVE) {\n      Array.isArray(subObject)\n        ? subObject.splice(lastProp, 1)\n        : delete subObject[lastProp];\n    }\n    if (thisOp === REPLACE || thisOp === ADD) {\n      subObject[lastProp] = thisDiff.value;\n    }\n  }\n  return subObject;\n}\n\nfunction jsonPatchPathConverter(stringPath) {\n  return stringPath.split('/').slice(1);\n}\n\nexport {diffApply, jsonPatchPathConverter};\n"]},"metadata":{},"sourceType":"module"}