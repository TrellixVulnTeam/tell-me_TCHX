{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/mystudy/react/tell-me-react/src/components/Comments.jsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport \"../scss/components/comments.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar currentdate = new Date();\nvar datetime = currentdate.getFullYear() + \"-\" + currentdate.getMonth() + \"-\" + currentdate.getDay() + \"T\" + currentdate.getHours() + \":\" + currentdate.getMinutes() + \":\" + currentdate.getSeconds();\n\nconst Comments = ({\n  postId\n}) => {\n  _s();\n\n  const [comments, setComments] = React.useState([]);\n  const [newComment, setNewComment] = React.useState(\"\");\n  const [dataComment, setDataComment] = React.useState('');\n  const [dataUserComment, setDataUserComment] = React.useState([]);\n  const [updateCommentBody, setUpdateCommentBody] = React.useState({\n    value: \"\",\n    openUptComm: false\n  }); // console.log(dataComment);\n  // let dataAboutUser = JSON.parse(localStorage.user);\n\n  React.useEffect(() => {\n    fetch(`https://ekreative-json-server.herokuapp.com/comments?postId=${postId}&_sort=createdAt&_order=asc`).then(response => response.json()).then(data => {\n      setComments(data);\n      data.map(comment => setDataComment(comment.userId));\n    });\n  }, []);\n  React.useEffect(() => {\n    fetch(`https://ekreative-json-server.herokuapp.com/comments/1`).then(response => response.json()).then(data => {\n      console.log(data);\n      setDataComment(data.userId);\n    });\n  }, []);\n\n  const handleChange = e => {\n    setUpdateCommentBody(prevState => ({\n      prevState,\n      value: e.target.value\n    }));\n    setNewComment(e.target.value);\n  };\n\n  const openUpdateBlock = id => {\n    setUpdateCommentBody(prevState => ({\n      prevState,\n      openUptComm: true\n    }));\n  };\n\n  const updateComment = ({\n    id\n  }, updateBody) => {\n    const data = {\n      body: updateBody,\n      updatedAt: datetime\n    };\n    const headers = {\n      Authorization: `Bearer ${localStorage.getItem(\"token\").slice(1, -1)}`\n    };\n    axios.patch(`https://ekreative-json-server.herokuapp.com/664/comments/${id}`, data, {\n      headers\n    });\n    setUpdateCommentBody(prevState => ({\n      prevState,\n      openUptComm: false\n    }));\n  };\n\n  const addComment = postId => {\n    const data = {\n      postId,\n      // userId: dataAboutUser.id,\n      body: newComment,\n      createdAt: datetime,\n      updatedAt: \"\"\n    };\n    const headers = {\n      Authorization: `Bearer ${localStorage.getItem(\"token\").slice(1, -1)}`\n    };\n    axios.post(`https://ekreative-json-server.herokuapp.com/664/comments`, data, {\n      headers\n    });\n    document.location.reload(true);\n  };\n\n  const deleteComment = id => {\n    const headers = {\n      Authorization: `Bearer ${localStorage.getItem(\"token\").slice(1, -1)}`\n    };\n    axios.delete(`https://ekreative-json-server.herokuapp.com/664/comments/${id}`, {\n      headers\n    });\n    console.log(`Bearer` + localStorage.getItem(\"token\"));\n    document.location.reload(true);\n  }; //  console.log('dataComment',dataComment);\n  // React.useEffect(() => {\n  //   userData();\n  //   return () => {\n  //     setDataUserComment([]); // This worked for me\n  //   };\n  // }, []);\n  // const userData = () => {\n\n\n  let headers = {\n    \"mode\": \"no-cors\"\n  }; // fetch(`https://ekreative-json-server.herokuapp.com/users${dataComment}`, { headers })\n  //   .then((response) => response.json())\n  //   .then((data) => {\n  //     // setDataUserComment([data]);\n  //     // console.log('data',data);\n  //   });\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments-of-post\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), localStorage.getItem(\"token\") ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-input-block\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"https://static01.nyt.com/images/2020/11/09/arts/06depp-item/06depp-item-mediumSquareAt3X-v2.jpg\",\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newComment,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"#post\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => addComment(postId),\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 27\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }, this) : \"\", comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-data\",\n      children: updateCommentBody.openUptComm ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: comment.body,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => updateComment(comment, updateCommentBody.value),\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment-content\",\n        children: [dataUserComment.map(user => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"user-of-comment\",\n          children: user.id === comment.userId ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [user.firstname, \" \", user.lastname]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 28\n          }, this) : ''\n        }, comment.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 21\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comment-content\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: comment.body\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 23\n          }, this)\n        }, comment.id + 3 + \"li\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this)]\n      }, comment.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 19\n      }, this)\n    }, comment.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Comments, \"QiuqHEcz7HHixXZNt252Ib1ZfXc=\");\n\n_c = Comments;\nexport default Comments;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"sources":["/Users/admin/Documents/mystudy/react/tell-me-react/src/components/Comments.jsx"],"names":["axios","React","useSelector","useDispatch","Link","currentdate","Date","datetime","getFullYear","getMonth","getDay","getHours","getMinutes","getSeconds","Comments","postId","comments","setComments","useState","newComment","setNewComment","dataComment","setDataComment","dataUserComment","setDataUserComment","updateCommentBody","setUpdateCommentBody","value","openUptComm","useEffect","fetch","then","response","json","data","map","comment","userId","console","log","handleChange","e","prevState","target","openUpdateBlock","id","updateComment","updateBody","body","updatedAt","headers","Authorization","localStorage","getItem","slice","patch","addComment","createdAt","post","document","location","reload","deleteComment","delete","user","firstname","lastname"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport \"../scss/components/comments.scss\";\n\nvar currentdate = new Date();\nvar datetime =\n  currentdate.getFullYear() +\n  \"-\" +\n  currentdate.getMonth() +\n  \"-\" +\n  currentdate.getDay() +\n  \"T\" +\n  currentdate.getHours() +\n  \":\" +\n  currentdate.getMinutes() +\n  \":\" +\n  currentdate.getSeconds();\n\nconst Comments = ({ postId }) => {\n  const [comments, setComments] = React.useState([]);\n  const [newComment, setNewComment] = React.useState(\"\");\n  const [dataComment, setDataComment] = React.useState('');\n  const [dataUserComment, setDataUserComment] = React.useState([]);\n  const [updateCommentBody, setUpdateCommentBody] = React.useState({\n    value: \"\",\n    openUptComm: false,\n  });\n  // console.log(dataComment);\n\n    // let dataAboutUser = JSON.parse(localStorage.user);\n\n  React.useEffect(() => {\n    fetch(\n      `https://ekreative-json-server.herokuapp.com/comments?postId=${postId}&_sort=createdAt&_order=asc`\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        setComments(data);\n\n        data.map((comment) =>\n          setDataComment( comment.userId )\n        );\n      });\n  }, []);\n\n  React.useEffect(() => {\n    fetch(\n      `https://ekreative-json-server.herokuapp.com/comments/1`\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data);\n\n          setDataComment( data.userId )\n      });\n  }, []);\n\n  const handleChange = (e) => {\n    setUpdateCommentBody((prevState) => ({ prevState, value: e.target.value }));\n    setNewComment(e.target.value);\n  };\n\n  const openUpdateBlock = (id) => {\n    setUpdateCommentBody((prevState) => ({\n      prevState,\n      openUptComm: true,\n    }));\n  };\n\n  const updateComment = ({ id }, updateBody) => {\n    const data = {\n      body: updateBody,\n      updatedAt: datetime,\n    };\n    const headers = {\n      Authorization: `Bearer ${localStorage.getItem(\"token\").slice(1, -1)}`,\n    };\n    axios.patch(\n      `https://ekreative-json-server.herokuapp.com/664/comments/${id}`,\n      data,\n      { headers }\n    );\n\n    setUpdateCommentBody((prevState) => ({\n      prevState,\n      openUptComm: false,\n    }));\n  };\n\n  const addComment = (postId) => {\n    const data = {\n      postId,\n      // userId: dataAboutUser.id,\n      body: newComment,\n      createdAt: datetime,\n      updatedAt: \"\",\n    };\n\n    const headers = {\n      Authorization: `Bearer ${localStorage.getItem(\"token\").slice(1, -1)}`,\n    };\n\n   \n\n    axios.post(\n      `https://ekreative-json-server.herokuapp.com/664/comments`,\n      data,\n      { headers }\n    );\n      document.location.reload(true)\n  };\n\n  const deleteComment = (id) => {\n    const headers = {\n      Authorization: `Bearer ${localStorage.getItem(\"token\").slice(1, -1)}`,\n    };\n    axios.delete(\n      `https://ekreative-json-server.herokuapp.com/664/comments/${id}`,\n      { headers }\n    );\n      console.log(`Bearer` + localStorage.getItem(\"token\"));\n      document.location.reload(true)\n  };\n\n    //  console.log('dataComment',dataComment);\n  \n  // React.useEffect(() => {\n  //   userData();\n  //   return () => {\n  //     setDataUserComment([]); // This worked for me\n  //   };\n  // }, []);\n  \n  // const userData = () => {\n    let headers = {\n      \"mode\": \"no-cors\",\n    }\n  \n    // fetch(`https://ekreative-json-server.herokuapp.com/users${dataComment}`, { headers })\n    //   .then((response) => response.json())\n    //   .then((data) => {\n    //     // setDataUserComment([data]);\n    //     // console.log('data',data);\n    //   });\n  // }\n\n  \n  return (\n    <div className=\"comments-of-post\">\n      <h3>comments</h3>\n      {localStorage.getItem(\"token\") ? (\n        <div className=\"comment-input-block\">\n          <img\n            src=\"https://static01.nyt.com/images/2020/11/09/arts/06depp-item/06depp-item-mediumSquareAt3X-v2.jpg\"\n            alt=\"\"\n          />\n          <input type=\"text\" value={newComment} onChange={handleChange} />\n         <Link to='#post'><button onClick={() => addComment(postId)}>&#43;</button></Link>\n        </div>\n      ) : (\n        \"\"\n      )}\n\n      {comments.map((comment) => (\n            <div key={comment.id} className=\"comment-data\">\n              {updateCommentBody.openUptComm ? (\n                <div className=\"comment-content\">\n                  <input\n                    type=\"text\"\n                    value={comment.body}\n                    onChange={handleChange}\n                  />\n                  <button\n                    onClick={() =>\n                      updateComment(comment, updateCommentBody.value)\n                    }\n                  >\n                    Update\n                  </button>\n                </div>\n              ) : (\n                  <div key={comment.id} className=\"comment-content\">\n                    {dataUserComment.map((user) => (\n                    <div key={comment.id} className=\"user-of-comment\">\n                      {user.id === comment.userId\n                        ? (<p>{user.firstname} {user.lastname}</p>)\n                          : ('')}\n                    </div>\n                    ))}\n                    <div key={comment.id + 3 + \"li\"} className=\"comment-content\" >\n                      <p>{comment.body}</p>\n                    {/* {localStorage.getItem('token') && dataAboutUser.id === comment.userId ? (\n                      <div key={comment.id + 1}>\n                        <button onClick={() => openUpdateBlock(comment.id)}>\n                          Update\n                        </button>\n                        <button\n                          key={comment.id + 2}\n                          onClick={() => deleteComment(comment.id)}\n                        >\n                          Delete\n                        </button>\n                      </div>\n                    ) : (\n                      \"\"\n                    )} */}\n                  </div>\n                </div>\n              )}\n            </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Comments;\n"]},"metadata":{},"sourceType":"module"}