{"ast":null,"code":"const {\n  distance\n} = require('fastest-levenshtein');\n\nconst readJson = require('read-package-json-fast');\n\nconst {\n  cmdList\n} = require('./cmd-list.js');\n\nconst didYouMean = async (npm, path, scmd) => {\n  // const cmd = await npm.cmd(str)\n  const close = cmdList.filter(cmd => distance(scmd, cmd) < scmd.length * 0.4 && scmd !== cmd);\n  let best = [];\n\n  for (const str of close) {\n    const cmd = await npm.cmd(str);\n    best.push(`    npm ${str} # ${cmd.description}`);\n  } // We would already be suggesting this in `npm x` so omit them here\n\n\n  const runScripts = ['stop', 'start', 'test', 'restart'];\n\n  try {\n    const {\n      bin,\n      scripts\n    } = await readJson(`${path}/package.json`);\n    best = best.concat(Object.keys(scripts || {}).filter(cmd => distance(scmd, cmd) < scmd.length * 0.4 && !runScripts.includes(cmd)).map(str => `    npm run ${str} # run the \"${str}\" package script`), Object.keys(bin || {}).filter(cmd => distance(scmd, cmd) < scmd.length * 0.4)\n    /* eslint-disable-next-line max-len */\n    .map(str => `    npm exec ${str} # run the \"${str}\" command from either this or a remote npm package`));\n  } catch (_) {// gracefully ignore not being in a folder w/ a package.json\n  }\n\n  if (best.length === 0) {\n    return '';\n  }\n\n  const suggestion = best.length === 1 ? `\\n\\nDid you mean this?\\n${best[0]}` : `\\n\\nDid you mean one of these?\\n${best.slice(0, 3).join('\\n')}`;\n  return suggestion;\n};\n\nmodule.exports = didYouMean;","map":{"version":3,"sources":["/Users/admin/Documents/mystudy/react/tell-me-react/tell-me-react/node_modules/npm/lib/utils/did-you-mean.js"],"names":["distance","require","readJson","cmdList","didYouMean","npm","path","scmd","close","filter","cmd","length","best","str","push","description","runScripts","bin","scripts","concat","Object","keys","includes","map","_","suggestion","slice","join","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAeC,OAAO,CAAC,qBAAD,CAA5B;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,wBAAD,CAAxB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAcF,OAAO,CAAC,eAAD,CAA3B;;AAEA,MAAMG,UAAU,GAAG,OAAOC,GAAP,EAAYC,IAAZ,EAAkBC,IAAlB,KAA2B;AAC5C;AACA,QAAMC,KAAK,GAAGL,OAAO,CAACM,MAAR,CAAeC,GAAG,IAAIV,QAAQ,CAACO,IAAD,EAAOG,GAAP,CAAR,GAAsBH,IAAI,CAACI,MAAL,GAAc,GAApC,IAA2CJ,IAAI,KAAKG,GAA1E,CAAd;AACA,MAAIE,IAAI,GAAG,EAAX;;AACA,OAAK,MAAMC,GAAX,IAAkBL,KAAlB,EAAyB;AACvB,UAAME,GAAG,GAAG,MAAML,GAAG,CAACK,GAAJ,CAAQG,GAAR,CAAlB;AACAD,IAAAA,IAAI,CAACE,IAAL,CAAW,WAAUD,GAAI,MAAKH,GAAG,CAACK,WAAY,EAA9C;AACD,GAP2C,CAQ5C;;;AACA,QAAMC,UAAU,GAAG,CAAC,MAAD,EAAS,OAAT,EAAkB,MAAlB,EAA0B,SAA1B,CAAnB;;AACA,MAAI;AACF,UAAM;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAmB,MAAMhB,QAAQ,CAAE,GAAEI,IAAK,eAAT,CAAvC;AACAM,IAAAA,IAAI,GAAGA,IAAI,CAACO,MAAL,CACLC,MAAM,CAACC,IAAP,CAAYH,OAAO,IAAI,EAAvB,EACGT,MADH,CACUC,GAAG,IAAIV,QAAQ,CAACO,IAAD,EAAOG,GAAP,CAAR,GAAsBH,IAAI,CAACI,MAAL,GAAc,GAApC,IAA2C,CAACK,UAAU,CAACM,QAAX,CAAoBZ,GAApB,CAD7D,EAEGa,GAFH,CAEOV,GAAG,IAAK,eAAcA,GAAI,eAAcA,GAAI,kBAFnD,CADK,EAILO,MAAM,CAACC,IAAP,CAAYJ,GAAG,IAAI,EAAnB,EACGR,MADH,CACUC,GAAG,IAAIV,QAAQ,CAACO,IAAD,EAAOG,GAAP,CAAR,GAAsBH,IAAI,CAACI,MAAL,GAAc,GADrD;AAEE;AAFF,KAGGY,GAHH,CAGOV,GAAG,IAAK,gBAAeA,GAAI,eAAcA,GAAI,oDAHpD,CAJK,CAAP;AASD,GAXD,CAWE,OAAOW,CAAP,EAAU,CACV;AACD;;AAED,MAAIZ,IAAI,CAACD,MAAL,KAAgB,CAApB,EAAuB;AACrB,WAAO,EAAP;AACD;;AAED,QAAMc,UAAU,GACdb,IAAI,CAACD,MAAL,KAAgB,CAAhB,GACK,2BAA0BC,IAAI,CAAC,CAAD,CAAI,EADvC,GAEK,mCAAkCA,IAAI,CAACc,KAAL,CAAW,CAAX,EAAc,CAAd,EAAiBC,IAAjB,CAAsB,IAAtB,CAA4B,EAHrE;AAIA,SAAOF,UAAP;AACD,CAlCD;;AAmCAG,MAAM,CAACC,OAAP,GAAiBzB,UAAjB","sourcesContent":["const { distance } = require('fastest-levenshtein')\nconst readJson = require('read-package-json-fast')\nconst { cmdList } = require('./cmd-list.js')\n\nconst didYouMean = async (npm, path, scmd) => {\n  // const cmd = await npm.cmd(str)\n  const close = cmdList.filter(cmd => distance(scmd, cmd) < scmd.length * 0.4 && scmd !== cmd)\n  let best = []\n  for (const str of close) {\n    const cmd = await npm.cmd(str)\n    best.push(`    npm ${str} # ${cmd.description}`)\n  }\n  // We would already be suggesting this in `npm x` so omit them here\n  const runScripts = ['stop', 'start', 'test', 'restart']\n  try {\n    const { bin, scripts } = await readJson(`${path}/package.json`)\n    best = best.concat(\n      Object.keys(scripts || {})\n        .filter(cmd => distance(scmd, cmd) < scmd.length * 0.4 && !runScripts.includes(cmd))\n        .map(str => `    npm run ${str} # run the \"${str}\" package script`),\n      Object.keys(bin || {})\n        .filter(cmd => distance(scmd, cmd) < scmd.length * 0.4)\n        /* eslint-disable-next-line max-len */\n        .map(str => `    npm exec ${str} # run the \"${str}\" command from either this or a remote npm package`)\n    )\n  } catch (_) {\n    // gracefully ignore not being in a folder w/ a package.json\n  }\n\n  if (best.length === 0) {\n    return ''\n  }\n\n  const suggestion =\n    best.length === 1\n      ? `\\n\\nDid you mean this?\\n${best[0]}`\n      : `\\n\\nDid you mean one of these?\\n${best.slice(0, 3).join('\\n')}`\n  return suggestion\n}\nmodule.exports = didYouMean\n"]},"metadata":{},"sourceType":"script"}