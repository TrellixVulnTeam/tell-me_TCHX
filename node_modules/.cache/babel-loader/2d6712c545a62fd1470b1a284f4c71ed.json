{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/mystudy/react/tell-me-react/tell-me-react/src/components/GetPosts.jsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button, PostBlock, Pagination } from \"./index\";\nimport { setAddData, setGetPostsPage } from \"../redux/action\";\nimport \"../scss/components/getPosts.scss\";\nimport Announcements from \"./Announcements\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar currentdate = new Date();\nvar datetime = currentdate.getFullYear() + \"-\" + currentdate.getMonth() + \"-\" + currentdate.getDay() + \"T\" + currentdate.getHours() + \":\" + currentdate.getMinutes() + \":\" + currentdate.getSeconds();\n\nconst GetPosts = () => {\n  _s();\n\n  const [posts, setPosts] = React.useState([]); // const [isLoaded, setIsLoaded] = React.useState(false);\n  // const [error, setError] = React.useState(null);\n\n  const [updateDataPost, setUpdateDataPost] = React.useState(null);\n  const [currentPage, setCurrentPage] = React.useState(1);\n  const [postsPerPage] = React.useState(10);\n  const [announcements, setAnnouncements] = React.useState([]); //redux\n\n  const dispatch = useDispatch();\n  const postReducer = useSelector(state => state.postReducer);\n  const postsPages = useSelector(state => state.paginateReducer);\n  console.log(postsPages); //pagination\n\n  const lastPostIndex = currentPage * postsPerPage;\n  const firstPostIndex = lastPostIndex - postsPerPage;\n  const currentPost = posts.slice(firstPostIndex, lastPostIndex);\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  React.useEffect(() => {\n    fetch(`https://ekreative-json-server.herokuapp.com/664/posts`).then(response => response.json()).then(data => {\n      setPosts(data);\n    });\n  }, []);\n  React.useEffect(() => {\n    fetch(`https://ekreative-json-server.herokuapp.com/664/announcements?_sort=createdAt&_order=desc&_limit=10`).then(response => response.json()).then(data => setAnnouncements(data));\n  }, []);\n\n  const getUpdatePost = () => {\n    postsPages.map(dataPost => {\n      setUpdateDataPost({\n        title: dataPost.title,\n        body: dataPost.body,\n        userId: dataPost.userId,\n        createAt: dataPost.createdAt,\n        updatedAt: datetime\n      });\n    });\n    const headers = {\n      Authorization: `Bearer ${localStorage.getItem(\"token\").slice(1, -1)}`\n    };\n    axios.patch(`https://ekreative-json-server.herokuapp.com/664/post`, updateDataPost, {\n      headers\n    });\n  };\n\n  const handleChange = e => {\n    dispatch(setAddData({\n      title: e.target.title,\n      body: e.target.body\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"get-posts\",\n    id: \"posts\",\n    children: [postsPages.map(dataPost => /*#__PURE__*/_jsxDEV(PostBlock, { ...dataPost\n    }, dataPost.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this)), postReducer.map(dataUpdatePost => /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"update-post\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"close\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"material-icons-outlined\",\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"update your post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          action: \"\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"title-block\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"header-for-post-form\",\n              children: \"title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"input-for-title\",\n              value: dataUpdatePost.title,\n              onChange: handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"post-block\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"header-for-post-form\",\n              children: \"post\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              type: \"text\",\n              className: \"input-for-post\",\n              value: dataUpdatePost.body,\n              onChange: handleChange,\n              children: dataUpdatePost.body\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"button\",\n            className: \"button-update\",\n            onClik: getUpdatePost,\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 15\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)]\n    }, dataUpdatePost.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(Pagination, {\n      postsPerPage: postsPerPage,\n      totalPosts: posts.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), announcements.map(announ => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"announcements\",\n      children: /*#__PURE__*/_jsxDEV(Announcements, { ...announ\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GetPosts, \"pQAaTglsViVrjKbQiYvH6/arqjE=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = GetPosts;\nexport default GetPosts;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetPosts\");","map":{"version":3,"sources":["/Users/admin/Documents/mystudy/react/tell-me-react/tell-me-react/src/components/GetPosts.jsx"],"names":["axios","React","useDispatch","useSelector","Button","PostBlock","Pagination","setAddData","setGetPostsPage","Announcements","currentdate","Date","datetime","getFullYear","getMonth","getDay","getHours","getMinutes","getSeconds","GetPosts","posts","setPosts","useState","updateDataPost","setUpdateDataPost","currentPage","setCurrentPage","postsPerPage","announcements","setAnnouncements","dispatch","postReducer","state","postsPages","paginateReducer","console","log","lastPostIndex","firstPostIndex","currentPost","slice","paginate","pageNumber","useEffect","fetch","then","response","json","data","getUpdatePost","map","dataPost","title","body","userId","createAt","createdAt","updatedAt","headers","Authorization","localStorage","getItem","patch","handleChange","e","target","id","dataUpdatePost","length","announ"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button, PostBlock, Pagination } from \"./index\";\nimport { setAddData, setGetPostsPage } from \"../redux/action\";\nimport \"../scss/components/getPosts.scss\";\nimport Announcements from \"./Announcements\";\n\nvar currentdate = new Date();\n\nvar datetime =\n  currentdate.getFullYear() +\n  \"-\" +\n  currentdate.getMonth() +\n  \"-\" +\n  currentdate.getDay() +\n  \"T\" +\n  currentdate.getHours() +\n  \":\" +\n  currentdate.getMinutes() +\n  \":\" +\n  currentdate.getSeconds();\n\nconst GetPosts = () => {\n  const [posts, setPosts] = React.useState([]);\n  // const [isLoaded, setIsLoaded] = React.useState(false);\n  // const [error, setError] = React.useState(null);\n  const [updateDataPost, setUpdateDataPost] = React.useState(null);\n  const [currentPage, setCurrentPage] = React.useState(1);\n  const [postsPerPage] = React.useState(10);\n  const [announcements, setAnnouncements] = React.useState([]);\n\n  //redux\n  const dispatch = useDispatch();\n  const postReducer = useSelector((state) => state.postReducer);\n  const postsPages = useSelector((state) => state.paginateReducer);\n  console.log(postsPages);\n\n  //pagination\n  const lastPostIndex = currentPage * postsPerPage;\n  const firstPostIndex = lastPostIndex - postsPerPage;\n  const currentPost = posts.slice(firstPostIndex, lastPostIndex);\n\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\n\n  React.useEffect(() => {\n    fetch(`https://ekreative-json-server.herokuapp.com/664/posts`)\n      .then((response) => response.json())\n      .then((data) => {\n        setPosts(data);\n      });\n  }, []);\n\n  React.useEffect(() => {\n    fetch(\n      `https://ekreative-json-server.herokuapp.com/664/announcements?_sort=createdAt&_order=desc&_limit=10`\n    )\n      .then((response) => response.json())\n      .then((data) => setAnnouncements(data));\n  }, []);\n\n  const getUpdatePost = () => {\n    postsPages.map((dataPost) => {\n      setUpdateDataPost({\n        title: dataPost.title,\n        body: dataPost.body,\n        userId: dataPost.userId,\n        createAt: dataPost.createdAt,\n        updatedAt: datetime,\n      });\n    });\n\n    const headers = {\n      Authorization: `Bearer ${localStorage.getItem(\"token\").slice(1, -1)}`,\n    };\n\n    axios.patch(\n      `https://ekreative-json-server.herokuapp.com/664/post`,\n      updateDataPost,\n      { headers }\n    );\n  };\n\n  const handleChange = (e) => {\n    dispatch(setAddData({ title: e.target.title, body: e.target.body }));\n  };\n\n  return (\n    <div className=\"get-posts\" id=\"posts\">\n      {postsPages.map((dataPost) => (\n        <PostBlock key={dataPost.id} {...dataPost} />\n      ))}\n      {postReducer.map((dataUpdatePost) => (\n        <div id=\"update-post\" key={dataUpdatePost.id}>\n          <div className=\"close\">\n            <span className=\"material-icons-outlined\">&times;</span>\n          </div>\n          <div className=\"modal-content\">\n            <h2>update your post</h2>\n            <form action=\"\">\n              <div className=\"title-block\">\n                <p className=\"header-for-post-form\">title</p>\n                <input\n                  type=\"text\"\n                  className=\"input-for-title\"\n                  value={dataUpdatePost.title}\n                  onChange={handleChange}\n                />\n              </div>\n              <div className=\"post-block\">\n                <p className=\"header-for-post-form\">post</p>\n                <textarea\n                  type=\"text\"\n                  className=\"input-for-post\"\n                  value={dataUpdatePost.body}\n                  onChange={handleChange}\n                >\n                  {dataUpdatePost.body}\n                </textarea>\n              </div>\n              <Button\n                type=\"button\"\n                className=\"button-update\"\n                onClik={getUpdatePost}\n              >\n                Edit\n              </Button>{\" \"}\n            </form>\n          </div>\n        </div>\n      ))}\n      <Pagination postsPerPage={postsPerPage} totalPosts={posts.length} />\n      {announcements.map(announ => (\n        <div className=\"announcements\">\n          <Announcements {...announ} />\n          </div>\n      ))\n      \n      \n      }\n    </div>\n  );\n};\n\nexport default GetPosts;\n"]},"metadata":{},"sourceType":"module"}